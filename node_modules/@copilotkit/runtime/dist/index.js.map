{"version":3,"sources":["../package.json","../src/index.ts","../src/lib/runtime/copilot-runtime.ts","../src/service-adapters/langchain/langserve.ts","../src/service-adapters/openai/openai-adapter.ts","../src/service-adapters/openai/utils.ts","../src/service-adapters/langchain/utils.ts","../src/service-adapters/langchain/langchain-adapter.ts","../src/service-adapters/google/google-genai-adapter.ts","../src/service-adapters/openai/openai-assistant-adapter.ts","../src/service-adapters/unify/unify-adapter.ts","../src/service-adapters/groq/groq-adapter.ts","../src/service-adapters/anthropic/anthropic-adapter.ts","../src/service-adapters/anthropic/utils.ts","../src/service-adapters/events.ts","../src/lib/telemetry-client.ts","../src/agents/langgraph/event-source.ts","../src/agents/langgraph/events.ts","../src/lib/runtime/remote-actions.ts","../src/graphql/types/base/index.ts","../src/graphql/types/converted/index.ts","../src/service-adapters/conversion.ts","../src/lib/integrations/shared.ts","../src/graphql/resolvers/copilot.resolver.ts","../src/graphql/inputs/generate-copilot-response.input.ts","../src/graphql/inputs/message.input.ts","../src/graphql/types/enums.ts","../src/graphql/inputs/frontend.input.ts","../src/graphql/inputs/action.input.ts","../src/graphql/inputs/cloud.input.ts","../src/graphql/inputs/cloud-guardrails.input.ts","../src/graphql/inputs/forwarded-parameters.input.ts","../src/graphql/inputs/agent-session.input.ts","../src/graphql/inputs/agent-state.input.ts","../src/graphql/types/copilot-response.type.ts","../src/graphql/types/message-status.type.ts","../src/graphql/types/response-status.type.ts","../src/utils/failed-response-status-reasons.ts","../src/lib/logger.ts","../src/lib/integrations/nextjs/app-router.ts","../src/lib/integrations/nextjs/pages-router.ts","../src/lib/integrations/node-http/index.ts","../src/lib/integrations/node-express/index.ts","../src/lib/integrations/nest/index.ts"],"sourcesContent":["{\n  \"name\": \"@copilotkit/runtime\",\n  \"private\": false,\n  \"homepage\": \"https://github.com/CopilotKit/CopilotKit\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/CopilotKit/CopilotKit.git\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"version\": \"1.3.15\",\n  \"sideEffects\": false,\n  \"main\": \"./dist/index.js\",\n  \"module\": \"./dist/index.mjs\",\n  \"exports\": {\n    \".\": \"./dist/index.js\"\n  },\n  \"types\": \"./dist/index.d.ts\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build\": \"tsup --onSuccess \\\"pnpm run generate-graphql-schema\\\"\",\n    \"dev\": \"tsup --watch --onSuccess \\\"pnpm run generate-graphql-schema\\\"\",\n    \"test\": \"jest --passWithNoTests\",\n    \"check-types\": \"tsc --noEmit\",\n    \"clean\": \"rm -rf .turbo && rm -rf node_modules && rm -rf dist && rm -rf .next && rm -rf __snapshots__\",\n    \"generate-graphql-schema\": \"rm -rf __snapshots__ && ts-node ./scripts/generate-gql-schema.ts\",\n    \"link:global\": \"pnpm link --global\",\n    \"unlink:global\": \"pnpm unlink --global\"\n  },\n  \"devDependencies\": {\n    \"@swc/core\": \"1.5.28\",\n    \"@types/express\": \"^4.17.21\",\n    \"@types/jest\": \"^29.5.4\",\n    \"@types/node\": \"^18.11.17\",\n    \"@whatwg-node/server\": \"^0.9.34\",\n    \"eslint\": \"^8.56.0\",\n    \"eslint-config-custom\": \"workspace:*\",\n    \"jest\": \"^29.6.4\",\n    \"nodemon\": \"^3.1.3\",\n    \"ts-jest\": \"^29.1.1\",\n    \"ts-node\": \"^10.9.2\",\n    \"tsconfig\": \"workspace:*\",\n    \"tsup\": \"^6.7.0\",\n    \"typescript\": \"^5.2.3\",\n    \"zod-to-json-schema\": \"^3.23.5\"\n  },\n  \"dependencies\": {\n    \"@anthropic-ai/sdk\": \"^0.27.3\",\n    \"@copilotkit/shared\": \"workspace:*\",\n    \"@graphql-yoga/plugin-defer-stream\": \"^3.3.1\",\n    \"@langchain/community\": \"^0.0.53\",\n    \"@langchain/core\": \"^0.3.13\",\n    \"@langchain/google-gauth\": \"^0.1.0\",\n    \"@langchain/openai\": \"^0.0.28\",\n    \"class-transformer\": \"^0.5.1\",\n    \"express\": \"^4.19.2\",\n    \"graphql\": \"^16.8.1\",\n    \"graphql-scalars\": \"^1.23.0\",\n    \"graphql-yoga\": \"^5.3.1\",\n    \"groq-sdk\": \"^0.5.0\",\n    \"langchain\": \"^0.3.3\",\n    \"openai\": \"^4.50.0\",\n    \"pino\": \"^9.2.0\",\n    \"pino-pretty\": \"^11.2.1\",\n    \"reflect-metadata\": \"^0.2.2\",\n    \"rxjs\": \"^7.8.1\",\n    \"type-graphql\": \"2.0.0-rc.1\",\n    \"zod\": \"^3.23.3\"\n  },\n  \"keywords\": [\n    \"copilotkit\",\n    \"copilot\",\n    \"react\",\n    \"nextjs\",\n    \"nodejs\",\n    \"ai\",\n    \"assistant\",\n    \"javascript\",\n    \"automation\",\n    \"textarea\"\n  ]\n}\n","import \"reflect-metadata\";\nexport * from \"./lib\";\nexport * from \"./utils\";\nexport * from \"./service-adapters\";\n","/**\n * <Callout type=\"info\">\n *   This is the reference for the `CopilotRuntime` class. For more information and example code snippets, please see [Concept: Copilot Runtime](/concepts/copilot-runtime).\n * </Callout>\n *\n * ## Usage\n *\n * ```tsx\n * import { CopilotRuntime } from \"@copilotkit/runtime\";\n *\n * const copilotKit = new CopilotRuntime();\n * ```\n */\n\nimport { Action, actionParametersToJsonSchema, Parameter, randomId } from \"@copilotkit/shared\";\nimport { RemoteChain, RemoteChainParameters, CopilotServiceAdapter } from \"../../service-adapters\";\nimport { MessageInput } from \"../../graphql/inputs/message.input\";\nimport { ActionInput } from \"../../graphql/inputs/action.input\";\nimport { RuntimeEventSource } from \"../../service-adapters/events\";\nimport { convertGqlInputToMessages } from \"../../service-adapters/conversion\";\nimport { AgentStateMessage, Message } from \"../../graphql/types/converted\";\nimport { ForwardedParametersInput } from \"../../graphql/inputs/forwarded-parameters.input\";\nimport {\n  setupRemoteActions,\n  RemoteActionDefinition,\n  LangGraphAgentAction,\n  isLangGraphAgentAction,\n} from \"./remote-actions\";\nimport { GraphQLContext } from \"../integrations/shared\";\nimport { AgentSessionInput } from \"../../graphql/inputs/agent-session.input\";\nimport { from } from \"rxjs\";\nimport { AgentStateInput } from \"../../graphql/inputs/agent-state.input\";\n\ninterface CopilotRuntimeRequest {\n  serviceAdapter: CopilotServiceAdapter;\n  messages: MessageInput[];\n  actions: ActionInput[];\n  agentSession?: AgentSessionInput;\n  agentStates?: AgentStateInput[];\n  outputMessagesPromise: Promise<Message[]>;\n  threadId?: string;\n  runId?: string;\n  publicApiKey?: string;\n  graphqlContext: GraphQLContext;\n  forwardedParameters?: ForwardedParametersInput;\n  url?: string;\n}\n\ninterface CopilotRuntimeResponse {\n  threadId: string;\n  runId?: string;\n  eventSource: RuntimeEventSource;\n  serverSideActions: Action<any>[];\n  actionInputsWithoutAgents: ActionInput[];\n}\n\ntype ActionsConfiguration<T extends Parameter[] | [] = []> =\n  | Action<T>[]\n  | ((ctx: { properties: any; url?: string }) => Action<T>[]);\n\ninterface OnBeforeRequestOptions {\n  threadId?: string;\n  runId?: string;\n  inputMessages: Message[];\n  properties: any;\n  url?: string;\n}\n\ntype OnBeforeRequestHandler = (options: OnBeforeRequestOptions) => void | Promise<void>;\n\ninterface OnAfterRequestOptions {\n  threadId: string;\n  runId?: string;\n  inputMessages: Message[];\n  outputMessages: Message[];\n  properties: any;\n  url?: string;\n}\n\ntype OnAfterRequestHandler = (options: OnAfterRequestOptions) => void | Promise<void>;\n\ninterface Middleware {\n  /**\n   * A function that is called before the request is processed.\n   */\n  onBeforeRequest?: OnBeforeRequestHandler;\n\n  /**\n   * A function that is called after the request is processed.\n   */\n  onAfterRequest?: OnAfterRequestHandler;\n}\n\nexport interface CopilotRuntimeConstructorParams<T extends Parameter[] | [] = []> {\n  /**\n   * Middleware to be used by the runtime.\n   *\n   * ```ts\n   * onBeforeRequest: (options: {\n   *   threadId?: string;\n   *   runId?: string;\n   *   inputMessages: Message[];\n   *   properties: any;\n   * }) => void | Promise<void>;\n   * ```\n   *\n   * ```ts\n   * onAfterRequest: (options: {\n   *   threadId?: string;\n   *   runId?: string;\n   *   inputMessages: Message[];\n   *   outputMessages: Message[];\n   *   properties: any;\n   * }) => void | Promise<void>;\n   * ```\n   */\n  middleware?: Middleware;\n\n  /*\n   * A list of server side actions that can be executed.\n   */\n  actions?: ActionsConfiguration<T>;\n\n  /*\n   * A list of remote actions that can be executed.\n   */\n  remoteActions?: RemoteActionDefinition[];\n\n  /*\n   * An array of LangServer URLs.\n   */\n  langserve?: RemoteChainParameters[];\n}\n\nexport class CopilotRuntime<const T extends Parameter[] | [] = []> {\n  public actions: ActionsConfiguration<T>;\n  private remoteActionDefinitions: RemoteActionDefinition[];\n  private langserve: Promise<Action<any>>[] = [];\n  private onBeforeRequest?: OnBeforeRequestHandler;\n  private onAfterRequest?: OnAfterRequestHandler;\n\n  constructor(params?: CopilotRuntimeConstructorParams<T>) {\n    this.actions = params?.actions || [];\n\n    for (const chain of params?.langserve || []) {\n      const remoteChain = new RemoteChain(chain);\n      this.langserve.push(remoteChain.toAction());\n    }\n\n    this.remoteActionDefinitions = params?.remoteActions || [];\n\n    this.onBeforeRequest = params?.middleware?.onBeforeRequest;\n    this.onAfterRequest = params?.middleware?.onAfterRequest;\n  }\n\n  async processRuntimeRequest(request: CopilotRuntimeRequest): Promise<CopilotRuntimeResponse> {\n    const {\n      serviceAdapter,\n      messages: rawMessages,\n      actions: clientSideActionsInput,\n      threadId,\n      runId,\n      outputMessagesPromise,\n      graphqlContext,\n      forwardedParameters,\n      agentSession,\n      url,\n    } = request;\n\n    if (agentSession) {\n      return this.processAgentRequest(request);\n    }\n\n    const messages = rawMessages.filter((message) => !message.agentStateMessage);\n\n    const inputMessages = convertGqlInputToMessages(messages);\n    const serverSideActions = await this.getServerSideActions(request);\n\n    const serverSideActionsInput: ActionInput[] = serverSideActions.map((action) => ({\n      name: action.name,\n      description: action.description,\n      jsonSchema: JSON.stringify(actionParametersToJsonSchema(action.parameters)),\n    }));\n\n    const actionInputs = flattenToolCallsNoDuplicates([\n      ...serverSideActionsInput,\n      ...clientSideActionsInput,\n    ]);\n\n    await this.onBeforeRequest?.({\n      threadId,\n      runId,\n      inputMessages,\n      properties: graphqlContext.properties,\n      url,\n    });\n\n    try {\n      const eventSource = new RuntimeEventSource();\n\n      const result = await serviceAdapter.process({\n        messages: inputMessages,\n        actions: actionInputs,\n        threadId,\n        runId,\n        eventSource,\n        forwardedParameters,\n      });\n\n      outputMessagesPromise\n        .then((outputMessages) => {\n          this.onAfterRequest?.({\n            threadId: result.threadId,\n            runId: result.runId,\n            inputMessages,\n            outputMessages,\n            properties: graphqlContext.properties,\n            url,\n          });\n        })\n        .catch((_error) => {});\n\n      return {\n        threadId: result.threadId,\n        runId: result.runId,\n        eventSource,\n        serverSideActions,\n        actionInputsWithoutAgents: actionInputs.filter(\n          (action) =>\n            // TODO-AGENTS: do not exclude ALL server side actions\n            !serverSideActions.find((serverSideAction) => serverSideAction.name == action.name),\n          // !isLangGraphAgentAction(\n          //   serverSideActions.find((serverSideAction) => serverSideAction.name == action.name),\n          // ),\n        ),\n      };\n    } catch (error) {\n      console.error(\"Error getting response:\", error);\n      throw error;\n    }\n  }\n\n  private async processAgentRequest(\n    request: CopilotRuntimeRequest,\n  ): Promise<CopilotRuntimeResponse> {\n    const { messages: rawMessages, outputMessagesPromise, graphqlContext, agentSession } = request;\n    const { threadId = randomId(), agentName, nodeName } = agentSession;\n    const serverSideActions = await this.getServerSideActions(request);\n\n    const messages = convertGqlInputToMessages(rawMessages);\n\n    const agent = serverSideActions.find(\n      (action) => action.name === agentName && isLangGraphAgentAction(action),\n    ) as LangGraphAgentAction;\n\n    if (!agent) {\n      throw new Error(`Agent ${agentName} not found`);\n    }\n\n    const serverSideActionsInput: ActionInput[] = serverSideActions\n      .filter((action) => !isLangGraphAgentAction(action))\n      .map((action) => ({\n        name: action.name,\n        description: action.description,\n        jsonSchema: JSON.stringify(actionParametersToJsonSchema(action.parameters)),\n      }));\n\n    const actionInputsWithoutAgents = flattenToolCallsNoDuplicates([\n      ...serverSideActionsInput,\n      ...request.actions,\n    ]);\n\n    await this.onBeforeRequest?.({\n      threadId,\n      runId: undefined,\n      inputMessages: messages,\n      properties: graphqlContext.properties,\n    });\n    try {\n      const eventSource = new RuntimeEventSource();\n      const stream = await agent.langGraphAgentHandler({\n        name: agentName,\n        threadId,\n        nodeName,\n        actionInputsWithoutAgents,\n      });\n\n      eventSource.stream(async (eventStream$) => {\n        from(stream).subscribe({\n          next: (event) => eventStream$.next(event),\n          error: (err) => console.error(\"Error in stream\", err),\n          complete: () => eventStream$.complete(),\n        });\n      });\n\n      outputMessagesPromise\n        .then((outputMessages) => {\n          this.onAfterRequest?.({\n            threadId,\n            runId: undefined,\n            inputMessages: messages,\n            outputMessages,\n            properties: graphqlContext.properties,\n          });\n        })\n        .catch((_error) => {});\n\n      return {\n        threadId,\n        runId: undefined,\n        eventSource,\n        serverSideActions: [],\n        actionInputsWithoutAgents,\n      };\n    } catch (error) {\n      console.error(\"Error getting response:\", error);\n      throw error;\n    }\n  }\n\n  private async getServerSideActions(request: CopilotRuntimeRequest): Promise<Action<any>[]> {\n    const { messages: rawMessages, graphqlContext, agentStates, url } = request;\n    const inputMessages = convertGqlInputToMessages(rawMessages);\n    const langserveFunctions: Action<any>[] = [];\n\n    for (const chainPromise of this.langserve) {\n      try {\n        const chain = await chainPromise;\n        langserveFunctions.push(chain);\n      } catch (error) {\n        console.error(\"Error loading langserve chain:\", error);\n      }\n    }\n    const remoteActions = await setupRemoteActions({\n      remoteActionDefinitions: this.remoteActionDefinitions,\n      graphqlContext,\n      messages: inputMessages,\n      agentStates,\n      frontendUrl: url,\n    });\n\n    const configuredActions =\n      typeof this.actions === \"function\"\n        ? this.actions({ properties: graphqlContext.properties, url })\n        : this.actions;\n\n    return [...configuredActions, ...langserveFunctions, ...remoteActions];\n  }\n}\n\nexport function flattenToolCallsNoDuplicates(toolsByPriority: ActionInput[]): ActionInput[] {\n  let allTools: ActionInput[] = [];\n  const allToolNames: string[] = [];\n  for (const tool of toolsByPriority) {\n    if (!allToolNames.includes(tool.name)) {\n      allTools.push(tool);\n      allToolNames.push(tool.name);\n    }\n  }\n  return allTools;\n}\n","import { Parameter, Action } from \"@copilotkit/shared\";\nimport { RemoteRunnable } from \"langchain/runnables/remote\";\n\nexport interface RemoteChainParameters {\n  name: string;\n  description: string;\n  chainUrl: string;\n  parameters?: Parameter[];\n  parameterType?: \"single\" | \"multi\";\n}\n\nexport class RemoteChain {\n  name: string;\n  description: string;\n  chainUrl: string;\n  parameters?: Parameter[];\n  parameterType: \"single\" | \"multi\";\n\n  constructor(options: RemoteChainParameters) {\n    this.name = options.name;\n    this.description = options.description;\n    this.chainUrl = options.chainUrl;\n    this.parameters = options.parameters;\n    this.parameterType = options.parameterType || \"multi\";\n  }\n\n  async toAction(): Promise<Action<any>> {\n    if (!this.parameters) {\n      await this.inferLangServeParameters();\n    }\n\n    return {\n      name: this.name,\n      description: this.description,\n      parameters: this.parameters!,\n      handler: async (args: any) => {\n        const runnable = new RemoteRunnable({ url: this.chainUrl });\n        let input: any;\n        if (this.parameterType === \"single\") {\n          input = args[Object.keys(args)[0]];\n        } else {\n          input = args;\n        }\n        return await runnable.invoke(input);\n      },\n    };\n  }\n\n  async inferLangServeParameters() {\n    const supportedTypes = [\"string\", \"number\", \"boolean\"];\n\n    let schemaUrl = this.chainUrl.replace(/\\/+$/, \"\") + \"/input_schema\";\n    let schema = await fetch(schemaUrl)\n      .then((res) => res.json())\n      .catch(() => {\n        throw new Error(\"Failed to fetch langserve schema at \" + schemaUrl);\n      });\n    // for now, don't use json schema, just do a simple conversion\n\n    if (supportedTypes.includes(schema.type)) {\n      this.parameterType = \"single\";\n      this.parameters = [\n        {\n          name: \"input\",\n          type: schema.type,\n          description: \"The input to the chain\",\n        },\n      ];\n    } else if (schema.type === \"object\") {\n      this.parameterType = \"multi\";\n      this.parameters = Object.keys(schema.properties).map((key) => {\n        let property = schema.properties[key];\n        if (!supportedTypes.includes(property.type)) {\n          throw new Error(\"Unsupported schema type\");\n        }\n        return {\n          name: key,\n          type: property.type,\n          description: property.description || \"\",\n          required: schema.required?.includes(key) || false,\n        };\n      });\n    } else {\n      throw new Error(\"Unsupported schema type\");\n    }\n  }\n}\n","/**\n * Copilot Runtime adapter for OpenAI.\n *\n * ## Example\n *\n * ```ts\n * import { CopilotRuntime, OpenAIAdapter } from \"@copilotkit/runtime\";\n * import OpenAI from \"openai\";\n *\n * const copilotKit = new CopilotRuntime();\n *\n * const openai = new OpenAI({\n *   organization: \"<your-organization-id>\", // optional\n *   apiKey: \"<your-api-key>\",\n * });\n *\n * const serviceAdapter = new OpenAIAdapter({ openai });\n *\n * return copilotKit.streamHttpServerResponse(req, res, serviceAdapter);\n * ```\n */\nimport OpenAI from \"openai\";\nimport {\n  CopilotServiceAdapter,\n  CopilotRuntimeChatCompletionRequest,\n  CopilotRuntimeChatCompletionResponse,\n} from \"../service-adapter\";\nimport {\n  convertActionInputToOpenAITool,\n  convertMessageToOpenAIMessage,\n  limitMessagesToTokenCount,\n} from \"./utils\";\nimport { randomId } from \"@copilotkit/shared\";\n\nconst DEFAULT_MODEL = \"gpt-4o\";\n\nexport interface OpenAIAdapterParams {\n  /**\n   * An optional OpenAI instance to use.  If not provided, a new instance will be\n   * created.\n   */\n  openai?: OpenAI;\n\n  /**\n   * The model to use.\n   */\n  model?: string;\n\n  /**\n   * Whether to disable parallel tool calls.\n   * You can disable parallel tool calls to force the model to execute tool calls sequentially.\n   * This is useful if you want to execute tool calls in a specific order so that the state changes\n   * introduced by one tool call are visible to the next tool call. (i.e. new actions or readables)\n   *\n   * @default false\n   */\n  disableParallelToolCalls?: boolean;\n}\n\nexport class OpenAIAdapter implements CopilotServiceAdapter {\n  private model: string = DEFAULT_MODEL;\n\n  private disableParallelToolCalls: boolean = false;\n  private _openai: OpenAI;\n  public get openai(): OpenAI {\n    return this._openai;\n  }\n\n  constructor(params?: OpenAIAdapterParams) {\n    this._openai = params?.openai || new OpenAI({});\n    if (params?.model) {\n      this.model = params.model;\n    }\n    this.disableParallelToolCalls = params?.disableParallelToolCalls || false;\n  }\n\n  async process(\n    request: CopilotRuntimeChatCompletionRequest,\n  ): Promise<CopilotRuntimeChatCompletionResponse> {\n    const {\n      threadId,\n      model = this.model,\n      messages,\n      actions,\n      eventSource,\n      forwardedParameters,\n    } = request;\n    const tools = actions.map(convertActionInputToOpenAITool);\n\n    let openaiMessages = messages.map(convertMessageToOpenAIMessage);\n    openaiMessages = limitMessagesToTokenCount(openaiMessages, tools, model);\n\n    let toolChoice: any = forwardedParameters?.toolChoice;\n    if (forwardedParameters?.toolChoice === \"function\") {\n      toolChoice = {\n        type: \"function\",\n        function: { name: forwardedParameters.toolChoiceFunctionName },\n      };\n    }\n\n    const stream = this.openai.beta.chat.completions.stream({\n      model: model,\n      stream: true,\n      messages: openaiMessages,\n      ...(tools.length > 0 && { tools }),\n      ...(forwardedParameters?.maxTokens && { max_tokens: forwardedParameters.maxTokens }),\n      ...(forwardedParameters?.stop && { stop: forwardedParameters.stop }),\n      ...(toolChoice && { tool_choice: toolChoice }),\n      ...(this.disableParallelToolCalls && { parallel_tool_calls: false }),\n    });\n\n    eventSource.stream(async (eventStream$) => {\n      let mode: \"function\" | \"message\" | null = null;\n      for await (const chunk of stream) {\n        const toolCall = chunk.choices[0].delta.tool_calls?.[0];\n        const content = chunk.choices[0].delta.content;\n\n        // When switching from message to function or vice versa,\n        // send the respective end event.\n        // If toolCall?.id is defined, it means a new tool call starts.\n        if (mode === \"message\" && toolCall?.id) {\n          mode = null;\n          eventStream$.sendTextMessageEnd();\n        } else if (mode === \"function\" && (toolCall === undefined || toolCall?.id)) {\n          mode = null;\n          eventStream$.sendActionExecutionEnd();\n        }\n\n        // If we send a new message type, send the appropriate start event.\n        if (mode === null) {\n          if (toolCall?.id) {\n            mode = \"function\";\n            eventStream$.sendActionExecutionStart(toolCall!.id, toolCall!.function!.name);\n          } else if (content) {\n            mode = \"message\";\n            eventStream$.sendTextMessageStart(chunk.id);\n          }\n        }\n\n        // send the content events\n        if (mode === \"message\" && content) {\n          eventStream$.sendTextMessageContent(content);\n        } else if (mode === \"function\" && toolCall?.function?.arguments) {\n          eventStream$.sendActionExecutionArgs(toolCall.function.arguments);\n        }\n      }\n\n      // send the end events\n      if (mode === \"message\") {\n        eventStream$.sendTextMessageEnd();\n      } else if (mode === \"function\") {\n        eventStream$.sendActionExecutionEnd();\n      }\n\n      eventStream$.complete();\n    });\n\n    return {\n      threadId: threadId || randomId(),\n    };\n  }\n}\n","import {\n  ActionExecutionMessage,\n  Message,\n  ResultMessage,\n  TextMessage,\n} from \"../../graphql/types/converted\";\nimport { ActionInput } from \"../../graphql/inputs/action.input\";\nimport { ChatCompletionMessageParam, ChatCompletionTool } from \"openai/resources\";\n\nexport function limitMessagesToTokenCount(\n  messages: any[],\n  tools: any[],\n  model: string,\n  maxTokens?: number,\n): any[] {\n  maxTokens ||= maxTokensForOpenAIModel(model);\n\n  const result: any[] = [];\n  const toolsNumTokens = countToolsTokens(model, tools);\n  if (toolsNumTokens > maxTokens) {\n    throw new Error(`Too many tokens in function definitions: ${toolsNumTokens} > ${maxTokens}`);\n  }\n  maxTokens -= toolsNumTokens;\n\n  for (const message of messages) {\n    if (message.role === \"system\") {\n      const numTokens = countMessageTokens(model, message);\n      maxTokens -= numTokens;\n\n      if (maxTokens < 0) {\n        throw new Error(\"Not enough tokens for system message.\");\n      }\n    }\n  }\n\n  let cutoff: boolean = false;\n\n  const reversedMessages = [...messages].reverse();\n  for (const message of reversedMessages) {\n    if (message.role === \"system\") {\n      result.unshift(message);\n      continue;\n    } else if (cutoff) {\n      continue;\n    }\n    let numTokens = countMessageTokens(model, message);\n    if (maxTokens < numTokens) {\n      cutoff = true;\n      continue;\n    }\n    result.unshift(message);\n    maxTokens -= numTokens;\n  }\n\n  return result;\n}\n\nexport function maxTokensForOpenAIModel(model: string): number {\n  return maxTokensByModel[model] || DEFAULT_MAX_TOKENS;\n}\n\nconst DEFAULT_MAX_TOKENS = 128000;\n\nconst maxTokensByModel: { [key: string]: number } = {\n  // GPT-4\n  \"gpt-4o\": 128000,\n  \"gpt-4o-2024-05-13\": 128000,\n  \"gpt-4-turbo\": 128000,\n  \"gpt-4-turbo-2024-04-09\": 128000,\n  \"gpt-4-0125-preview\": 128000,\n  \"gpt-4-turbo-preview\": 128000,\n  \"gpt-4-1106-preview\": 128000,\n  \"gpt-4-vision-preview\": 128000,\n  \"gpt-4-1106-vision-preview\": 128000,\n  \"gpt-4-32k\": 32768,\n  \"gpt-4-32k-0613\": 32768,\n  \"gpt-4-32k-0314\": 32768,\n  \"gpt-4\": 8192,\n  \"gpt-4-0613\": 8192,\n  \"gpt-4-0314\": 8192,\n\n  // GPT-3.5\n  \"gpt-3.5-turbo-0125\": 16385,\n  \"gpt-3.5-turbo\": 16385,\n  \"gpt-3.5-turbo-1106\": 16385,\n  \"gpt-3.5-turbo-instruct\": 4096,\n  \"gpt-3.5-turbo-16k\": 16385,\n  \"gpt-3.5-turbo-0613\": 4096,\n  \"gpt-3.5-turbo-16k-0613\": 16385,\n  \"gpt-3.5-turbo-0301\": 4097,\n};\n\nfunction countToolsTokens(model: string, tools: any[]): number {\n  if (tools.length === 0) {\n    return 0;\n  }\n  const json = JSON.stringify(tools);\n  return countTokens(model, json);\n}\n\nfunction countMessageTokens(model: string, message: any): number {\n  return countTokens(model, message.content || \"\");\n}\n\nfunction countTokens(model: string, text: string): number {\n  return text.length / 3;\n}\n\nexport function convertActionInputToOpenAITool(action: ActionInput): ChatCompletionTool {\n  return {\n    type: \"function\",\n    function: {\n      name: action.name,\n      description: action.description,\n      parameters: JSON.parse(action.jsonSchema),\n    },\n  };\n}\n\nexport function convertMessageToOpenAIMessage(message: Message): ChatCompletionMessageParam {\n  if (message.isTextMessage()) {\n    return {\n      role: message.role,\n      content: message.content,\n    };\n  } else if (message.isActionExecutionMessage()) {\n    return {\n      role: \"assistant\",\n      tool_calls: [\n        {\n          id: message.id,\n          type: \"function\",\n          function: {\n            name: message.name,\n            arguments: JSON.stringify(message.arguments),\n          },\n        },\n      ],\n    };\n  } else if (message.isResultMessage()) {\n    return {\n      role: \"tool\",\n      content: message.result,\n      tool_call_id: message.actionExecutionId,\n    };\n  }\n}\n\nexport function convertSystemMessageToAssistantAPI(message: ChatCompletionMessageParam) {\n  return {\n    ...message,\n    ...(message.role === \"system\" && {\n      role: \"assistant\",\n      content: \"THE FOLLOWING MESSAGE IS A SYSTEM MESSAGE: \" + message.content,\n    }),\n  };\n}\n","import {\n  ActionExecutionMessage,\n  Message,\n  ResultMessage,\n  TextMessage,\n} from \"../../graphql/types/converted\";\nimport {\n  AIMessage,\n  AIMessageChunk,\n  BaseMessage,\n  BaseMessageChunk,\n  HumanMessage,\n  SystemMessage,\n  ToolMessage,\n} from \"@langchain/core/messages\";\nimport { DynamicStructuredTool } from \"@langchain/core/tools\";\nimport { z } from \"zod\";\nimport { ActionInput } from \"../../graphql/inputs/action.input\";\nimport { LangChainReturnType } from \"./types\";\nimport { RuntimeEventSubject } from \"../events\";\nimport { randomId } from \"@copilotkit/shared\";\n\nexport function convertMessageToLangChainMessage(message: Message): BaseMessage {\n  if (message.isTextMessage()) {\n    if (message.role == \"user\") {\n      return new HumanMessage(message.content);\n    } else if (message.role == \"assistant\") {\n      return new AIMessage(message.content);\n    } else if (message.role === \"system\") {\n      return new SystemMessage(message.content);\n    }\n  } else if (message.isActionExecutionMessage()) {\n    return new AIMessage({\n      content: \"\",\n      tool_calls: [\n        {\n          id: message.id,\n          args: message.arguments,\n          name: message.name,\n        },\n      ],\n    });\n  } else if (message.isResultMessage()) {\n    return new ToolMessage({\n      content: message.result,\n      tool_call_id: message.actionExecutionId,\n    });\n  }\n}\n\nexport function convertJsonSchemaToZodSchema(jsonSchema: any, required: boolean): z.ZodSchema {\n  if (jsonSchema.type === \"object\") {\n    const spec: { [key: string]: z.ZodSchema } = {};\n\n    if (!jsonSchema.properties || !Object.keys(jsonSchema.properties).length) {\n      return !required ? z.object(spec).optional() : z.object(spec);\n    }\n\n    for (const [key, value] of Object.entries(jsonSchema.properties)) {\n      spec[key] = convertJsonSchemaToZodSchema(\n        value,\n        jsonSchema.required ? jsonSchema.required.includes(key) : false,\n      );\n    }\n    let schema = z.object(spec).describe(jsonSchema.description);\n    return required ? schema : schema.optional();\n  } else if (jsonSchema.type === \"string\") {\n    let schema = z.string().describe(jsonSchema.description);\n    return required ? schema : schema.optional();\n  } else if (jsonSchema.type === \"number\") {\n    let schema = z.number().describe(jsonSchema.description);\n    return required ? schema : schema.optional();\n  } else if (jsonSchema.type === \"boolean\") {\n    let schema = z.boolean().describe(jsonSchema.description);\n    return required ? schema : schema.optional();\n  } else if (jsonSchema.type === \"array\") {\n    let itemSchema = convertJsonSchemaToZodSchema(jsonSchema.items, true);\n    let schema = z.array(itemSchema).describe(jsonSchema.description);\n    return required ? schema : schema.optional();\n  }\n}\n\nexport function convertActionInputToLangChainTool(actionInput: ActionInput): any {\n  return new DynamicStructuredTool({\n    name: actionInput.name,\n    description: actionInput.description,\n    schema: convertJsonSchemaToZodSchema(\n      JSON.parse(actionInput.jsonSchema),\n      true,\n    ) as z.ZodObject<any>,\n    func: async () => {\n      return \"\";\n    },\n  });\n}\n\ninterface StreamLangChainResponseParams {\n  result: LangChainReturnType;\n  eventStream$: RuntimeEventSubject;\n  actionExecution?: {\n    id: string;\n    name: string;\n  };\n}\n\nfunction getConstructorName(object: any): string {\n  if (object && typeof object === \"object\" && object.constructor && object.constructor.name) {\n    return object.constructor.name;\n  }\n  return \"\";\n}\n\nfunction isAIMessage(message: any): message is AIMessage {\n  return Object.prototype.toString.call(message) === \"[object AIMessage]\";\n}\n\nfunction isAIMessageChunk(message: any): message is AIMessageChunk {\n  return Object.prototype.toString.call(message) === \"[object AIMessageChunk]\";\n}\n\nfunction isBaseMessageChunk(message: any): message is BaseMessageChunk {\n  return Object.prototype.toString.call(message) === \"[object BaseMessageChunk]\";\n}\n\nfunction maybeSendActionExecutionResultIsMessage(\n  eventStream$: RuntimeEventSubject,\n  actionExecution?: { id: string; name: string },\n) {\n  // language models need a result after the function call\n  // we simply let them know that we are sending a message\n  if (actionExecution) {\n    eventStream$.sendActionExecutionResult(\n      actionExecution.id,\n      actionExecution.name,\n      \"Sending a message\",\n    );\n  }\n}\n\nexport async function streamLangChainResponse({\n  result,\n  eventStream$,\n  actionExecution,\n}: StreamLangChainResponseParams) {\n  // We support several types of return values from LangChain functions:\n\n  // 1. string\n\n  if (typeof result === \"string\") {\n    if (!actionExecution) {\n      // Just send one chunk with the string as the content.\n      eventStream$.sendTextMessage(randomId(), result);\n    } else {\n      // Send as a result\n      eventStream$.sendActionExecutionResult(actionExecution.id, actionExecution.name, result);\n    }\n  }\n\n  // 2. AIMessage\n  // Send the content and function call of the AIMessage as the content of the chunk.\n  else if (isAIMessage(result)) {\n    maybeSendActionExecutionResultIsMessage(eventStream$, actionExecution);\n\n    if (result.content) {\n      eventStream$.sendTextMessage(randomId(), result.content as string);\n    }\n    for (const toolCall of result.tool_calls) {\n      eventStream$.sendActionExecution(\n        toolCall.id || randomId(),\n        toolCall.name,\n        JSON.stringify(toolCall.args),\n      );\n    }\n  }\n\n  // 3. BaseMessageChunk\n  // Send the content and function call of the AIMessage as the content of the chunk.\n  else if (isBaseMessageChunk(result)) {\n    maybeSendActionExecutionResultIsMessage(eventStream$, actionExecution);\n\n    if (result.lc_kwargs?.content) {\n      eventStream$.sendTextMessage(randomId(), result.content as string);\n    }\n    if (result.lc_kwargs?.tool_calls) {\n      for (const toolCall of result.lc_kwargs?.tool_calls) {\n        eventStream$.sendActionExecution(\n          toolCall.id || randomId(),\n          toolCall.name,\n          JSON.stringify(toolCall.args),\n        );\n      }\n    }\n  }\n\n  // 4. IterableReadableStream\n  // Stream the result of the LangChain function.\n  else if (result && \"getReader\" in result) {\n    maybeSendActionExecutionResultIsMessage(eventStream$, actionExecution);\n\n    let reader = result.getReader();\n\n    let mode: \"function\" | \"message\" | null = null;\n\n    const toolCallDetails = {\n      name: null,\n      id: null,\n      index: null,\n      prevIndex: null,\n    };\n\n    while (true) {\n      try {\n        const { done, value } = await reader.read();\n\n        let toolCallName: string | undefined = undefined;\n        let toolCallId: string | undefined = undefined;\n        let toolCallArgs: string | undefined = undefined;\n        let hasToolCall: boolean = false;\n        let content = value?.content as string;\n\n        if (isAIMessageChunk(value)) {\n          let chunk = value.tool_call_chunks?.[0];\n          toolCallArgs = chunk?.args;\n          hasToolCall = chunk != undefined;\n          if (chunk?.name) toolCallDetails.name = chunk.name;\n          // track different index on the same tool cool\n          if (chunk?.index != null) {\n            toolCallDetails.index = chunk.index; // 1\n            if (toolCallDetails.prevIndex == null) toolCallDetails.prevIndex = chunk.index;\n          }\n          // Differentiate when calling the same tool but with different index\n          if (chunk?.id)\n            toolCallDetails.id = chunk.index != null ? `${chunk.id}-idx-${chunk.index}` : chunk.id;\n\n          // Assign to internal variables that the entire script here knows how to work with\n          toolCallName = toolCallDetails.name;\n          toolCallId = toolCallDetails.id;\n        } else if (isBaseMessageChunk(value)) {\n          let chunk = value.additional_kwargs?.tool_calls?.[0];\n          toolCallName = chunk?.function?.name;\n          toolCallId = chunk?.id;\n          toolCallArgs = chunk?.function?.arguments;\n          hasToolCall = chunk?.function != undefined;\n        }\n\n        // When switching from message to function or vice versa,\n        // send the respective end event.\n        // If toolCallName is defined, it means a new tool call starts.\n        if (mode === \"message\" && (toolCallId || done)) {\n          mode = null;\n          eventStream$.sendTextMessageEnd();\n        } else if (mode === \"function\" && (!hasToolCall || done)) {\n          mode = null;\n          eventStream$.sendActionExecutionEnd();\n        }\n\n        if (done) {\n          break;\n        }\n\n        // If we send a new message type, send the appropriate start event.\n        if (mode === null) {\n          if (hasToolCall && toolCallId && toolCallName) {\n            mode = \"function\";\n            eventStream$.sendActionExecutionStart(toolCallId, toolCallName);\n          } else if (content) {\n            mode = \"message\";\n            eventStream$.sendTextMessageStart(randomId());\n          }\n        }\n\n        // send the content events\n        if (mode === \"message\" && content) {\n          eventStream$.sendTextMessageContent(\n            Array.isArray(content) ? (content[0]?.text ?? \"\") : content,\n          );\n        } else if (mode === \"function\" && toolCallArgs) {\n          // For calls of the same tool with different index, we seal last tool call and register a new one\n          if (toolCallDetails.index !== toolCallDetails.prevIndex) {\n            eventStream$.sendActionExecutionEnd();\n            eventStream$.sendActionExecutionStart(toolCallId, toolCallName);\n            toolCallDetails.prevIndex = toolCallDetails.index;\n          }\n          eventStream$.sendActionExecutionArgs(toolCallArgs);\n        }\n      } catch (error) {\n        console.error(\"Error reading from stream\", error);\n        break;\n      }\n    }\n  } else if (actionExecution) {\n    eventStream$.sendActionExecutionResult(\n      actionExecution.id,\n      actionExecution.name,\n      encodeResult(result),\n    );\n  }\n\n  // unsupported type\n  else {\n    throw new Error(\"Invalid return type from LangChain function.\");\n  }\n\n  eventStream$.complete();\n}\n\nfunction encodeResult(result: any): string {\n  if (result === undefined) {\n    return \"\";\n  } else if (typeof result === \"string\") {\n    return result;\n  } else {\n    return JSON.stringify(result);\n  }\n}\n","/**\n * Copilot Runtime adapter for LangChain.\n *\n * ## Example\n *\n * ```ts\n * import { CopilotRuntime, LangChainAdapter } from \"@copilotkit/runtime\";\n * import { ChatOpenAI } from \"@langchain/openai\";\n *\n * const copilotKit = new CopilotRuntime();\n *\n * const model = new ChatOpenAI({\n *   model: \"gpt-4o\",\n *   apiKey: \"<your-api-key>\",\n * });\n *\n * const serviceAdapter = new LangChainAdapter({\n *   chainFn: async ({ messages, tools }) => {\n *     return model.stream(messages, { tools });\n *   }\n * });\n *\n * return copilotKit.streamHttpServerResponse(req, res, serviceAdapter);\n * ```\n *\n * The asynchronous handler function (`chainFn`) can return any of the following:\n *\n * - A simple `string` response\n * - A LangChain stream (`IterableReadableStream`)\n * - A LangChain `BaseMessageChunk` object\n * - A LangChain `AIMessage` object\n */\n\nimport { BaseMessage } from \"@langchain/core/messages\";\nimport { CopilotServiceAdapter } from \"../service-adapter\";\nimport {\n  CopilotRuntimeChatCompletionRequest,\n  CopilotRuntimeChatCompletionResponse,\n} from \"../service-adapter\";\nimport {\n  convertActionInputToLangChainTool,\n  convertMessageToLangChainMessage,\n  streamLangChainResponse,\n} from \"./utils\";\nimport { DynamicStructuredTool } from \"@langchain/core/tools\";\nimport { LangChainReturnType } from \"./types\";\nimport { randomId } from \"@copilotkit/shared\";\n\ninterface ChainFnParameters {\n  model: string;\n  messages: BaseMessage[];\n  tools: DynamicStructuredTool[];\n  threadId?: string;\n  runId?: string;\n}\n\ninterface LangChainAdapterOptions {\n  /**\n   * A function that uses the LangChain API to generate a response.\n   */\n  chainFn: (parameters: ChainFnParameters) => Promise<LangChainReturnType>;\n}\n\nexport class LangChainAdapter implements CopilotServiceAdapter {\n  /**\n   * To use LangChain as a backend, provide a handler function to the adapter with your custom LangChain logic.\n   */\n  constructor(private options: LangChainAdapterOptions) {}\n\n  async process(\n    request: CopilotRuntimeChatCompletionRequest,\n  ): Promise<CopilotRuntimeChatCompletionResponse> {\n    const { eventSource, model, actions, messages, threadId, runId } = request;\n    const result = await this.options.chainFn({\n      messages: messages.map(convertMessageToLangChainMessage),\n      tools: actions.map(convertActionInputToLangChainTool),\n      model,\n      threadId,\n      runId,\n    });\n\n    eventSource.stream(async (eventStream$) => {\n      await streamLangChainResponse({\n        result,\n        eventStream$,\n      });\n    });\n\n    return {\n      threadId: threadId || randomId(),\n    };\n  }\n}\n","/**\n * Copilot Runtime adapter for Google Generative AI (e.g. Gemini).\n *\n * ## Example\n *\n * ```ts\n * import { CopilotRuntime, GoogleGenerativeAIAdapter } from \"@copilotkit/runtime\";\n * const { GoogleGenerativeAI } = require(\"@google/generative-ai\");\n *\n * const genAI = new GoogleGenerativeAI(process.env[\"GOOGLE_API_KEY\"]);\n *\n * const copilotKit = new CopilotRuntime();\n *\n * const serviceAdapter = new GoogleGenerativeAIAdapter({ model: \"gemini-1.5-pro\" });\n *\n * return copilotKit.streamHttpServerResponse(req, res, serviceAdapter);\n * ```\n */\nimport { ChatGoogle } from \"@langchain/google-gauth\";\nimport { LangChainAdapter } from \"../langchain/langchain-adapter\";\n\ninterface GoogleGenerativeAIAdapterOptions {\n  /**\n   * A custom Google Generative AI model to use.\n   */\n  model?: string;\n}\n\nexport class GoogleGenerativeAIAdapter extends LangChainAdapter {\n  constructor(options?: GoogleGenerativeAIAdapterOptions) {\n    super({\n      chainFn: async ({ messages, tools }) => {\n        const model = new ChatGoogle({\n          modelName: options?.model ?? \"gemini-1.5-pro\",\n          apiVersion: \"v1beta\",\n        }).bindTools(tools);\n        return model.stream(messages);\n      },\n    });\n  }\n}\n","/**\n * Copilot Runtime adapter for the OpenAI Assistant API.\n *\n * ## Example\n *\n * ```ts\n * import { CopilotRuntime, OpenAIAssistantAdapter } from \"@copilotkit/runtime\";\n * import OpenAI from \"openai\";\n *\n * const copilotKit = new CopilotRuntime();\n *\n * const openai = new OpenAI({\n *   organization: \"<your-organization-id>\",\n *   apiKey: \"<your-api-key>\",\n * });\n *\n * const serviceAdapter = new OpenAIAssistantAdapter({\n *   openai,\n *   assistantId: \"<your-assistant-id>\",\n *   codeInterpreterEnabled: true,\n *   fileSearchEnabled: true,\n * });\n *\n * return copilotKit.streamHttpServerResponse(req, res, serviceAdapter);\n * ```\n */\nimport OpenAI from \"openai\";\nimport {\n  CopilotServiceAdapter,\n  CopilotRuntimeChatCompletionRequest,\n  CopilotRuntimeChatCompletionResponse,\n} from \"../service-adapter\";\nimport { Message, ResultMessage, TextMessage } from \"../../graphql/types/converted\";\nimport {\n  convertActionInputToOpenAITool,\n  convertMessageToOpenAIMessage,\n  convertSystemMessageToAssistantAPI,\n} from \"./utils\";\nimport { RunSubmitToolOutputsStreamParams } from \"openai/resources/beta/threads/runs/runs\";\nimport { AssistantStream } from \"openai/lib/AssistantStream\";\nimport { RuntimeEventSource } from \"../events\";\nimport { ActionInput } from \"../../graphql/inputs/action.input\";\nimport { AssistantStreamEvent, AssistantTool } from \"openai/resources/beta/assistants\";\nimport { ForwardedParametersInput } from \"../../graphql/inputs/forwarded-parameters.input\";\n\nexport interface OpenAIAssistantAdapterParams {\n  /**\n   * The ID of the assistant to use.\n   */\n  assistantId: string;\n\n  /**\n   * An optional OpenAI instance to use. If not provided, a new instance will be created.\n   */\n  openai?: OpenAI;\n\n  /**\n   * Whether to enable code interpretation.\n   * @default true\n   */\n  codeInterpreterEnabled?: boolean;\n\n  /**\n   * Whether to enable file search.\n   * @default true\n   */\n  fileSearchEnabled?: boolean;\n\n  /**\n   * Whether to disable parallel tool calls.\n   * You can disable parallel tool calls to force the model to execute tool calls sequentially.\n   * This is useful if you want to execute tool calls in a specific order so that the state changes\n   * introduced by one tool call are visible to the next tool call. (i.e. new actions or readables)\n   *\n   * @default false\n   */\n  disableParallelToolCalls?: boolean;\n}\n\nexport class OpenAIAssistantAdapter implements CopilotServiceAdapter {\n  private openai: OpenAI;\n  private codeInterpreterEnabled: boolean;\n  private assistantId: string;\n  private fileSearchEnabled: boolean;\n  private disableParallelToolCalls: boolean;\n\n  constructor(params: OpenAIAssistantAdapterParams) {\n    this.openai = params.openai || new OpenAI({});\n    this.codeInterpreterEnabled = params.codeInterpreterEnabled === false || true;\n    this.fileSearchEnabled = params.fileSearchEnabled === false || true;\n    this.assistantId = params.assistantId;\n    this.disableParallelToolCalls = params?.disableParallelToolCalls || false;\n  }\n\n  async process(\n    request: CopilotRuntimeChatCompletionRequest,\n  ): Promise<CopilotRuntimeChatCompletionResponse> {\n    const { messages, actions, eventSource, runId, forwardedParameters } = request;\n    // if we don't have a threadId, create a new thread\n    let threadId = request.threadId || (await this.openai.beta.threads.create()).id;\n\n    const lastMessage = messages.at(-1);\n\n    let nextRunId: string | undefined = undefined;\n\n    // submit function outputs\n    if (lastMessage.isResultMessage() && runId) {\n      nextRunId = await this.submitToolOutputs(threadId, runId, messages, eventSource);\n    }\n    // submit user message\n    else if (lastMessage.isTextMessage()) {\n      nextRunId = await this.submitUserMessage(\n        threadId,\n        messages,\n        actions,\n        eventSource,\n        forwardedParameters,\n      );\n    }\n    // unsupported message\n    else {\n      throw new Error(\"No actionable message found in the messages\");\n    }\n\n    return {\n      threadId,\n      runId: nextRunId,\n    };\n  }\n\n  private async submitToolOutputs(\n    threadId: string,\n    runId: string,\n    messages: Message[],\n    eventSource: RuntimeEventSource,\n  ) {\n    let run = await this.openai.beta.threads.runs.retrieve(threadId, runId);\n    if (!run.required_action) {\n      throw new Error(\"No tool outputs required\");\n    }\n\n    // get the required tool call ids\n    const toolCallsIds = run.required_action.submit_tool_outputs.tool_calls.map(\n      (toolCall) => toolCall.id,\n    );\n\n    // search for these tool calls\n    const resultMessages = messages.filter(\n      (message) => message.isResultMessage() && toolCallsIds.includes(message.actionExecutionId),\n    ) as ResultMessage[];\n\n    if (toolCallsIds.length != resultMessages.length) {\n      throw new Error(\"Number of function results does not match the number of tool calls\");\n    }\n\n    // submit the tool outputs\n    const toolOutputs: RunSubmitToolOutputsStreamParams.ToolOutput[] = resultMessages.map(\n      (message) => {\n        return {\n          tool_call_id: message.actionExecutionId,\n          output: message.result,\n        };\n      },\n    );\n\n    const stream = this.openai.beta.threads.runs.submitToolOutputsStream(threadId, runId, {\n      tool_outputs: toolOutputs,\n      ...(this.disableParallelToolCalls && { parallel_tool_calls: false }),\n    });\n\n    await this.streamResponse(stream, eventSource);\n    return runId;\n  }\n\n  private async submitUserMessage(\n    threadId: string,\n    messages: Message[],\n    actions: ActionInput[],\n    eventSource: RuntimeEventSource,\n    forwardedParameters: ForwardedParametersInput,\n  ) {\n    messages = [...messages];\n\n    // get the instruction message\n    const instructionsMessage = messages.shift();\n    const instructions = instructionsMessage.isTextMessage() ? instructionsMessage.content : \"\";\n\n    // get the latest user message\n    const userMessage = messages\n      .map(convertMessageToOpenAIMessage)\n      .map(convertSystemMessageToAssistantAPI)\n      .at(-1);\n\n    if (userMessage.role !== \"user\") {\n      throw new Error(\"No user message found\");\n    }\n\n    // create a new message on the thread\n    await this.openai.beta.threads.messages.create(threadId, {\n      role: \"user\",\n      content: userMessage.content,\n    });\n\n    const openaiTools = actions.map(convertActionInputToOpenAITool);\n\n    const tools = [\n      ...openaiTools,\n      ...(this.codeInterpreterEnabled ? [{ type: \"code_interpreter\" } as AssistantTool] : []),\n      ...(this.fileSearchEnabled ? [{ type: \"file_search\" } as AssistantTool] : []),\n    ];\n\n    // run the thread\n    let stream = this.openai.beta.threads.runs.stream(threadId, {\n      assistant_id: this.assistantId,\n      instructions,\n      tools: tools,\n      ...(forwardedParameters?.maxTokens && {\n        max_completion_tokens: forwardedParameters.maxTokens,\n      }),\n      ...(this.disableParallelToolCalls && { parallel_tool_calls: false }),\n    });\n\n    await this.streamResponse(stream, eventSource);\n\n    return getRunIdFromStream(stream);\n  }\n\n  private async streamResponse(stream: AssistantStream, eventSource: RuntimeEventSource) {\n    eventSource.stream(async (eventStream$) => {\n      let inFunctionCall = false;\n\n      for await (const chunk of stream) {\n        switch (chunk.event) {\n          case \"thread.message.created\":\n            if (inFunctionCall) {\n              eventStream$.sendActionExecutionEnd();\n            }\n            eventStream$.sendTextMessageStart(chunk.data.id);\n            break;\n          case \"thread.message.delta\":\n            if (chunk.data.delta.content?.[0].type === \"text\") {\n              eventStream$.sendTextMessageContent(chunk.data.delta.content?.[0].text.value);\n            }\n            break;\n          case \"thread.message.completed\":\n            eventStream$.sendTextMessageEnd();\n            break;\n          case \"thread.run.step.delta\":\n            let toolCallId: string | undefined;\n            let toolCallName: string | undefined;\n            let toolCallArgs: string | undefined;\n            if (\n              chunk.data.delta.step_details.type === \"tool_calls\" &&\n              chunk.data.delta.step_details.tool_calls?.[0].type === \"function\"\n            ) {\n              toolCallId = chunk.data.delta.step_details.tool_calls?.[0].id;\n              toolCallName = chunk.data.delta.step_details.tool_calls?.[0].function.name;\n              toolCallArgs = chunk.data.delta.step_details.tool_calls?.[0].function.arguments;\n            }\n\n            if (toolCallName && toolCallId) {\n              if (inFunctionCall) {\n                eventStream$.sendActionExecutionEnd();\n              }\n              inFunctionCall = true;\n              eventStream$.sendActionExecutionStart(toolCallId, toolCallName);\n            } else if (toolCallArgs) {\n              eventStream$.sendActionExecutionArgs(toolCallArgs);\n            }\n            break;\n        }\n      }\n      if (inFunctionCall) {\n        eventStream$.sendActionExecutionEnd();\n      }\n      eventStream$.complete();\n    });\n  }\n}\n\nfunction getRunIdFromStream(stream: AssistantStream): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    let runIdGetter = (event: AssistantStreamEvent) => {\n      if (event.event === \"thread.run.created\") {\n        const runId = event.data.id;\n        stream.off(\"event\", runIdGetter);\n        resolve(runId);\n      }\n    };\n    stream.on(\"event\", runIdGetter);\n  });\n}\n","/**\n * CopilotKit Adapter for Unify\n *\n * <RequestExample>\n * ```jsx CopilotRuntime Example\n * const copilotKit = new CopilotRuntime();\n * return copilotKit.response(req, new UnifyAdapter());\n * ```\n * </RequestExample>\n *\n * You can easily set the model to use by passing it to the constructor.\n * ```jsx\n * const copilotKit = new CopilotRuntime();\n * return copilotKit.response(\n *   req,\n *   new UnifyAdapter({ model: \"llama-3-8b-chat@fireworks-ai\" }),\n * );\n * ```\n */\nimport { TextMessage } from \"../../graphql/types/converted\";\nimport {\n  CopilotRuntimeChatCompletionRequest,\n  CopilotRuntimeChatCompletionResponse,\n  CopilotServiceAdapter,\n} from \"../service-adapter\";\nimport OpenAI from \"openai\";\nimport { randomId } from \"@copilotkit/shared\";\nimport { convertActionInputToOpenAITool, convertMessageToOpenAIMessage } from \"../openai/utils\";\n\nexport interface UnifyAdapterParams {\n  apiKey?: string;\n  model: string;\n}\n\nexport class UnifyAdapter implements CopilotServiceAdapter {\n  private apiKey: string;\n  private model: string;\n  private start: boolean;\n\n  constructor(options?: UnifyAdapterParams) {\n    if (options?.apiKey) {\n      this.apiKey = options.apiKey;\n    } else {\n      this.apiKey = \"UNIFY_API_KEY\";\n    }\n    this.model = options?.model;\n    this.start = true;\n  }\n\n  async process(\n    request: CopilotRuntimeChatCompletionRequest,\n  ): Promise<CopilotRuntimeChatCompletionResponse> {\n    const tools = request.actions.map(convertActionInputToOpenAITool);\n    const openai = new OpenAI({\n      apiKey: this.apiKey,\n      baseURL: \"https://api.unify.ai/v0/\",\n    });\n\n    const messages = request.messages.map(convertMessageToOpenAIMessage);\n\n    const stream = await openai.chat.completions.create({\n      model: this.model,\n      messages: messages,\n      stream: true,\n      ...(tools.length > 0 && { tools }),\n    });\n\n    let model = null;\n    request.eventSource.stream(async (eventStream$) => {\n      let mode: \"function\" | \"message\" | null = null;\n      for await (const chunk of stream) {\n        if (this.start) {\n          model = chunk.model;\n          eventStream$.sendTextMessageStart(randomId());\n          eventStream$.sendTextMessageContent(`Model used: ${model}\\n`);\n          eventStream$.sendTextMessageEnd();\n          this.start = false;\n        }\n        const toolCall = chunk.choices[0].delta.tool_calls?.[0];\n        const content = chunk.choices[0].delta.content;\n\n        // When switching from message to function or vice versa,\n        // send the respective end event.\n        // If toolCall?.id is defined, it means a new tool call starts.\n        if (mode === \"message\" && toolCall?.id) {\n          mode = null;\n          eventStream$.sendTextMessageEnd();\n        } else if (mode === \"function\" && (toolCall === undefined || toolCall?.id)) {\n          mode = null;\n          eventStream$.sendActionExecutionEnd();\n        }\n\n        // If we send a new message type, send the appropriate start event.\n        if (mode === null) {\n          if (toolCall?.id) {\n            mode = \"function\";\n            eventStream$.sendActionExecutionStart(toolCall!.id, toolCall!.function!.name);\n          } else if (content) {\n            mode = \"message\";\n            eventStream$.sendTextMessageStart(chunk.id);\n          }\n        }\n\n        // send the content events\n        if (mode === \"message\" && content) {\n          eventStream$.sendTextMessageContent(content);\n        } else if (mode === \"function\" && toolCall?.function?.arguments) {\n          eventStream$.sendActionExecutionArgs(toolCall.function.arguments);\n        }\n      }\n\n      // send the end events\n      if (mode === \"message\") {\n        eventStream$.sendTextMessageEnd();\n      } else if (mode === \"function\") {\n        eventStream$.sendActionExecutionEnd();\n      }\n\n      eventStream$.complete();\n    });\n\n    return {\n      threadId: request.threadId || randomId(),\n    };\n  }\n}\n","/**\n * Copilot Runtime adapter for Groq.\n *\n * ## Example\n *\n * ```ts\n * import { CopilotRuntime, GroqAdapter } from \"@copilotkit/runtime\";\n * import { Groq } from \"groq-sdk\";\n *\n * const groq = new Groq({ apiKey: process.env[\"GROQ_API_KEY\"] });\n *\n * const copilotKit = new CopilotRuntime();\n *\n * const serviceAdapter = new GroqAdapter({ groq, model: \"<model-name>\" });\n *\n * return copilotKit.streamHttpServerResponse(req, res, serviceAdapter);\n * ```\n */\nimport { Groq } from \"groq-sdk\";\nimport {\n  CopilotServiceAdapter,\n  CopilotRuntimeChatCompletionRequest,\n  CopilotRuntimeChatCompletionResponse,\n} from \"../service-adapter\";\nimport {\n  convertActionInputToOpenAITool,\n  convertMessageToOpenAIMessage,\n  limitMessagesToTokenCount,\n} from \"../openai/utils\";\nimport { randomId } from \"@copilotkit/shared\";\n\nconst DEFAULT_MODEL = \"llama3-groq-70b-8192-tool-use-preview\";\n\nexport interface GroqAdapterParams {\n  /**\n   * An optional Groq instance to use.\n   */\n  groq?: Groq;\n\n  /**\n   * The model to use.\n   */\n  model?: string;\n\n  /**\n   * Whether to disable parallel tool calls.\n   * You can disable parallel tool calls to force the model to execute tool calls sequentially.\n   * This is useful if you want to execute tool calls in a specific order so that the state changes\n   * introduced by one tool call are visible to the next tool call. (i.e. new actions or readables)\n   *\n   * @default false\n   */\n  disableParallelToolCalls?: boolean;\n}\n\nexport class GroqAdapter implements CopilotServiceAdapter {\n  private model: string = DEFAULT_MODEL;\n\n  private disableParallelToolCalls: boolean = false;\n  private _groq: Groq;\n  public get groq(): Groq {\n    return this._groq;\n  }\n\n  constructor(params?: GroqAdapterParams) {\n    this._groq = params?.groq || new Groq({});\n    if (params?.model) {\n      this.model = params.model;\n    }\n    this.disableParallelToolCalls = params?.disableParallelToolCalls || false;\n  }\n\n  async process(\n    request: CopilotRuntimeChatCompletionRequest,\n  ): Promise<CopilotRuntimeChatCompletionResponse> {\n    const {\n      threadId,\n      model = this.model,\n      messages,\n      actions,\n      eventSource,\n      forwardedParameters,\n    } = request;\n    const tools = actions.map(convertActionInputToOpenAITool);\n\n    let openaiMessages = messages.map(convertMessageToOpenAIMessage);\n    openaiMessages = limitMessagesToTokenCount(openaiMessages, tools, model);\n\n    let toolChoice: any = forwardedParameters?.toolChoice;\n    if (forwardedParameters?.toolChoice === \"function\") {\n      toolChoice = {\n        type: \"function\",\n        function: { name: forwardedParameters.toolChoiceFunctionName },\n      };\n    }\n    const stream = await this.groq.chat.completions.create({\n      model: model,\n      stream: true,\n      messages: openaiMessages,\n      ...(tools.length > 0 && { tools }),\n      ...(forwardedParameters?.maxTokens && {\n        max_tokens: forwardedParameters.maxTokens,\n      }),\n      ...(forwardedParameters?.stop && { stop: forwardedParameters.stop }),\n      ...(toolChoice && { tool_choice: toolChoice }),\n      ...(this.disableParallelToolCalls && { parallel_tool_calls: false }),\n    });\n\n    eventSource.stream(async (eventStream$) => {\n      let mode: \"function\" | \"message\" | null = null;\n      for await (const chunk of stream) {\n        const toolCall = chunk.choices[0].delta.tool_calls?.[0];\n        const content = chunk.choices[0].delta.content;\n\n        // When switching from message to function or vice versa,\n        // send the respective end event.\n        // If toolCall?.id is defined, it means a new tool call starts.\n        if (mode === \"message\" && toolCall?.id) {\n          mode = null;\n          eventStream$.sendTextMessageEnd();\n        } else if (mode === \"function\" && (toolCall === undefined || toolCall?.id)) {\n          mode = null;\n          eventStream$.sendActionExecutionEnd();\n        }\n\n        // If we send a new message type, send the appropriate start event.\n        if (mode === null) {\n          if (toolCall?.id) {\n            mode = \"function\";\n            eventStream$.sendActionExecutionStart(toolCall!.id, toolCall!.function!.name);\n          } else if (content) {\n            mode = \"message\";\n            eventStream$.sendTextMessageStart(chunk.id);\n          }\n        }\n\n        // send the content events\n        if (mode === \"message\" && content) {\n          eventStream$.sendTextMessageContent(content);\n        } else if (mode === \"function\" && toolCall?.function?.arguments) {\n          eventStream$.sendActionExecutionArgs(toolCall.function.arguments);\n        }\n      }\n\n      // send the end events\n      if (mode === \"message\") {\n        eventStream$.sendTextMessageEnd();\n      } else if (mode === \"function\") {\n        eventStream$.sendActionExecutionEnd();\n      }\n\n      eventStream$.complete();\n    });\n\n    return {\n      threadId: threadId || randomId(),\n    };\n  }\n}\n","/**\n * Copilot Runtime adapter for Anthropic.\n *\n * ## Example\n *\n * ```ts\n * import { CopilotRuntime, AnthropicAdapter } from \"@copilotkit/runtime\";\n * import Anthropic from \"@anthropic-ai/sdk\";\n *\n * const copilotKit = new CopilotRuntime();\n *\n * const anthropic = new Anthropic({\n *   apiKey: \"<your-api-key>\",\n * });\n *\n * const serviceAdapter = new AnthropicAdapter({ anthropic });\n *\n * return copilotKit.streamHttpServerResponse(req, res, serviceAdapter);\n * ```\n */\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport {\n  CopilotServiceAdapter,\n  CopilotRuntimeChatCompletionRequest,\n  CopilotRuntimeChatCompletionResponse,\n} from \"../service-adapter\";\nimport {\n  convertActionInputToAnthropicTool,\n  convertMessageToAnthropicMessage,\n  groupAnthropicMessagesByRole,\n  limitMessagesToTokenCount,\n} from \"./utils\";\n\nimport { randomId } from \"@copilotkit/shared\";\nimport { TextMessage } from \"../../graphql/types/converted\";\n\nconst DEFAULT_MODEL = \"claude-3-sonnet-20240229\";\n\nexport interface AnthropicAdapterParams {\n  /**\n   * An optional Anthropic instance to use.  If not provided, a new instance will be\n   * created.\n   */\n  anthropic?: Anthropic;\n\n  /**\n   * The model to use.\n   */\n  model?: string;\n}\n\nexport class AnthropicAdapter implements CopilotServiceAdapter {\n  private model: string = DEFAULT_MODEL;\n\n  private _anthropic: Anthropic;\n  public get anthropic(): Anthropic {\n    return this._anthropic;\n  }\n\n  constructor(params?: AnthropicAdapterParams) {\n    this._anthropic = params?.anthropic || new Anthropic({});\n    if (params?.model) {\n      this.model = params.model;\n    }\n  }\n\n  async process(\n    request: CopilotRuntimeChatCompletionRequest,\n  ): Promise<CopilotRuntimeChatCompletionResponse> {\n    const {\n      threadId,\n      model = this.model,\n      messages: rawMessages,\n      actions,\n      eventSource,\n      forwardedParameters,\n    } = request;\n    const tools = actions.map(convertActionInputToAnthropicTool);\n\n    const messages = [...rawMessages];\n\n    // get the instruction message\n    const instructionsMessage = messages.shift();\n    const instructions = instructionsMessage.isTextMessage() ? instructionsMessage.content : \"\";\n\n    let anthropicMessages = messages.map(convertMessageToAnthropicMessage);\n    anthropicMessages = limitMessagesToTokenCount(anthropicMessages, tools, model);\n    anthropicMessages = groupAnthropicMessagesByRole(anthropicMessages);\n\n    let toolChoice: any = forwardedParameters?.toolChoice;\n    if (forwardedParameters?.toolChoice === \"function\") {\n      toolChoice = {\n        type: \"tool\",\n        name: forwardedParameters.toolChoiceFunctionName,\n      };\n    }\n\n    const stream = this.anthropic.messages.create({\n      system: instructions,\n      model: this.model,\n      messages: anthropicMessages,\n      max_tokens: forwardedParameters?.maxTokens || 1024,\n      ...(tools.length > 0 && { tools }),\n      ...(toolChoice && { tool_choice: toolChoice }),\n      stream: true,\n    });\n\n    eventSource.stream(async (eventStream$) => {\n      let mode: \"function\" | \"message\" | null = null;\n      let didOutputText = false;\n      let currentMessageId = randomId();\n      let currentToolCallId = randomId();\n      let filterThinkingTextBuffer = new FilterThinkingTextBuffer();\n\n      for await (const chunk of await stream) {\n        if (chunk.type === \"message_start\") {\n          currentMessageId = chunk.message.id;\n        } else if (chunk.type === \"content_block_start\") {\n          if (chunk.content_block.type === \"text\") {\n            didOutputText = false;\n            filterThinkingTextBuffer.reset();\n            mode = \"message\";\n          } else if (chunk.content_block.type === \"tool_use\") {\n            currentToolCallId = chunk.content_block.id;\n            eventStream$.sendActionExecutionStart(currentToolCallId, chunk.content_block.name);\n            mode = \"function\";\n          }\n        } else if (chunk.type === \"content_block_delta\") {\n          if (chunk.delta.type === \"text_delta\") {\n            const text = filterThinkingTextBuffer.onTextChunk(chunk.delta.text);\n            if (text.length > 0) {\n              if (!didOutputText) {\n                eventStream$.sendTextMessageStart(currentMessageId);\n                didOutputText = true;\n              }\n              eventStream$.sendTextMessageContent(text);\n            }\n          } else if (chunk.delta.type === \"input_json_delta\") {\n            eventStream$.sendActionExecutionArgs(chunk.delta.partial_json);\n          }\n        } else if (chunk.type === \"content_block_stop\") {\n          if (mode === \"message\") {\n            if (didOutputText) {\n              eventStream$.sendTextMessageEnd();\n            }\n          } else if (mode === \"function\") {\n            eventStream$.sendActionExecutionEnd();\n          }\n        }\n      }\n\n      eventStream$.complete();\n    });\n\n    return {\n      threadId: threadId || randomId(),\n    };\n  }\n}\n\nconst THINKING_TAG = \"<thinking>\";\nconst THINKING_TAG_END = \"</thinking>\";\n\nclass FilterThinkingTextBuffer {\n  private buffer: string;\n  private didFilterThinkingTag: boolean = false;\n\n  constructor() {\n    this.buffer = \"\";\n  }\n\n  onTextChunk(text: string): string {\n    this.buffer += text;\n    if (this.didFilterThinkingTag) {\n      return text;\n    }\n    const potentialTag = this.buffer.slice(0, THINKING_TAG.length);\n    if (THINKING_TAG.startsWith(potentialTag)) {\n      if (this.buffer.includes(THINKING_TAG_END)) {\n        const end = this.buffer.indexOf(THINKING_TAG_END);\n        const filteredText = this.buffer.slice(end + THINKING_TAG_END.length);\n        this.buffer = filteredText;\n        this.didFilterThinkingTag = true;\n        return filteredText;\n      } else {\n        return \"\";\n      }\n    }\n    return text;\n  }\n\n  reset() {\n    this.buffer = \"\";\n    this.didFilterThinkingTag = false;\n  }\n}\n","import {\n  ActionExecutionMessage,\n  Message,\n  ResultMessage,\n  TextMessage,\n} from \"../../graphql/types/converted\";\nimport { ActionInput } from \"../../graphql/inputs/action.input\";\nimport { Anthropic } from \"@anthropic-ai/sdk\";\n\nexport function limitMessagesToTokenCount(\n  messages: any[],\n  tools: any[],\n  model: string,\n  maxTokens?: number,\n): any[] {\n  maxTokens ||= MAX_TOKENS;\n\n  const result: any[] = [];\n  const toolsNumTokens = countToolsTokens(model, tools);\n  if (toolsNumTokens > maxTokens) {\n    throw new Error(`Too many tokens in function definitions: ${toolsNumTokens} > ${maxTokens}`);\n  }\n  maxTokens -= toolsNumTokens;\n\n  for (const message of messages) {\n    if (message.role === \"system\") {\n      const numTokens = countMessageTokens(model, message);\n      maxTokens -= numTokens;\n\n      if (maxTokens < 0) {\n        throw new Error(\"Not enough tokens for system message.\");\n      }\n    }\n  }\n\n  let cutoff: boolean = false;\n\n  const reversedMessages = [...messages].reverse();\n  for (const message of reversedMessages) {\n    if (message.role === \"system\") {\n      result.unshift(message);\n      continue;\n    } else if (cutoff) {\n      continue;\n    }\n    let numTokens = countMessageTokens(model, message);\n    if (maxTokens < numTokens) {\n      cutoff = true;\n      continue;\n    }\n    result.unshift(message);\n    maxTokens -= numTokens;\n  }\n\n  return result;\n}\n\nconst MAX_TOKENS = 128000;\n\nfunction countToolsTokens(model: string, tools: any[]): number {\n  if (tools.length === 0) {\n    return 0;\n  }\n  const json = JSON.stringify(tools);\n  return countTokens(model, json);\n}\n\nfunction countMessageTokens(model: string, message: any): number {\n  return countTokens(model, JSON.stringify(message.content) || \"\");\n}\n\nfunction countTokens(model: string, text: string): number {\n  return text.length / 3;\n}\n\nexport function convertActionInputToAnthropicTool(action: ActionInput): Anthropic.Messages.Tool {\n  return {\n    name: action.name,\n    description: action.description,\n    input_schema: JSON.parse(action.jsonSchema),\n  };\n}\n\nexport function convertMessageToAnthropicMessage(\n  message: Message,\n): Anthropic.Messages.MessageParam {\n  if (message.isTextMessage()) {\n    if (message.role === \"system\") {\n      return {\n        role: \"assistant\",\n        content: [\n          { type: \"text\", text: \"THE FOLLOWING MESSAGE IS A SYSTEM MESSAGE: \" + message.content },\n        ],\n      };\n    } else {\n      return {\n        role: message.role === \"user\" ? \"user\" : \"assistant\",\n        content: [{ type: \"text\", text: message.content }],\n      };\n    }\n  } else if (message.isActionExecutionMessage()) {\n    return {\n      role: \"assistant\",\n      content: [\n        {\n          id: message.id,\n          type: \"tool_use\",\n          input: message.arguments,\n          name: message.name,\n        },\n      ],\n    };\n  } else if (message.isResultMessage()) {\n    return {\n      role: \"user\",\n      content: [\n        {\n          type: \"tool_result\",\n          content: message.result,\n          tool_use_id: message.actionExecutionId,\n        },\n      ],\n    };\n  }\n}\n\nexport function groupAnthropicMessagesByRole(\n  messageParams: Anthropic.Messages.MessageParam[],\n): Anthropic.Messages.MessageParam[] {\n  return messageParams.reduce((acc, message) => {\n    const lastGroup = acc[acc.length - 1];\n\n    if (lastGroup && lastGroup.role === message.role) {\n      lastGroup.content = lastGroup.content.concat(message.content as any);\n    } else {\n      acc.push({\n        role: message.role,\n        content: [...(message.content as any)],\n      });\n    }\n\n    return acc;\n  }, [] as Anthropic.Messages.MessageParam[]);\n}\n","import { Action } from \"@copilotkit/shared\";\nimport {\n  of,\n  concat,\n  map,\n  scan,\n  concatMap,\n  ReplaySubject,\n  Subject,\n  firstValueFrom,\n  from,\n} from \"rxjs\";\nimport { streamLangChainResponse } from \"./langchain/utils\";\nimport { GuardrailsResult } from \"../graphql/types/guardrails-result.type\";\nimport telemetry from \"../lib/telemetry-client\";\nimport { isLangGraphAgentAction } from \"../lib/runtime/remote-actions\";\nimport { ActionInput } from \"../graphql/inputs/action.input\";\n\nexport enum RuntimeEventTypes {\n  TextMessageStart = \"TextMessageStart\",\n  TextMessageContent = \"TextMessageContent\",\n  TextMessageEnd = \"TextMessageEnd\",\n  ActionExecutionStart = \"ActionExecutionStart\",\n  ActionExecutionArgs = \"ActionExecutionArgs\",\n  ActionExecutionEnd = \"ActionExecutionEnd\",\n  ActionExecutionResult = \"ActionExecutionResult\",\n  AgentStateMessage = \"AgentStateMessage\",\n}\n\ntype FunctionCallScope = \"client\" | \"server\" | \"passThrough\";\n\nexport type RuntimeEvent =\n  | { type: RuntimeEventTypes.TextMessageStart; messageId: string }\n  | {\n      type: RuntimeEventTypes.TextMessageContent;\n      content: string;\n    }\n  | { type: RuntimeEventTypes.TextMessageEnd }\n  | {\n      type: RuntimeEventTypes.ActionExecutionStart;\n      actionExecutionId: string;\n      actionName: string;\n      scope?: FunctionCallScope;\n    }\n  | { type: RuntimeEventTypes.ActionExecutionArgs; args: string }\n  | { type: RuntimeEventTypes.ActionExecutionEnd }\n  | {\n      type: RuntimeEventTypes.ActionExecutionResult;\n      actionName: string;\n      actionExecutionId: string;\n      result: string;\n    }\n  | {\n      type: RuntimeEventTypes.AgentStateMessage;\n      threadId: string;\n      agentName: string;\n      nodeName: string;\n      runId: string;\n      active: boolean;\n      role: string;\n      state: string;\n      running: boolean;\n    };\n\ninterface RuntimeEventWithState {\n  event: RuntimeEvent | null;\n  callActionServerSide: boolean;\n  action: Action<any> | null;\n  actionExecutionId: string | null;\n  args: string;\n}\n\ntype EventSourceCallback = (eventStream$: RuntimeEventSubject) => Promise<void>;\n\nexport class RuntimeEventSubject extends ReplaySubject<RuntimeEvent> {\n  constructor() {\n    super();\n  }\n\n  sendTextMessageStart(messageId: string) {\n    this.next({ type: RuntimeEventTypes.TextMessageStart, messageId });\n  }\n\n  sendTextMessageContent(content: string) {\n    this.next({ type: RuntimeEventTypes.TextMessageContent, content });\n  }\n\n  sendTextMessageEnd() {\n    this.next({ type: RuntimeEventTypes.TextMessageEnd });\n  }\n\n  sendTextMessage(messageId: string, content: string) {\n    this.sendTextMessageStart(messageId);\n    this.sendTextMessageContent(content);\n    this.sendTextMessageEnd();\n  }\n\n  sendActionExecutionStart(actionExecutionId: string, actionName: string) {\n    this.next({\n      type: RuntimeEventTypes.ActionExecutionStart,\n      actionExecutionId,\n      actionName,\n    });\n  }\n\n  sendActionExecutionArgs(args: string) {\n    this.next({ type: RuntimeEventTypes.ActionExecutionArgs, args });\n  }\n\n  sendActionExecutionEnd() {\n    this.next({ type: RuntimeEventTypes.ActionExecutionEnd });\n  }\n\n  sendActionExecution(actionExecutionId: string, toolName: string, args: string) {\n    this.sendActionExecutionStart(actionExecutionId, toolName);\n    this.sendActionExecutionArgs(args);\n    this.sendActionExecutionEnd();\n  }\n\n  sendActionExecutionResult(actionExecutionId: string, actionName: string, result: string) {\n    this.next({\n      type: RuntimeEventTypes.ActionExecutionResult,\n      actionName,\n      actionExecutionId,\n      result,\n    });\n  }\n\n  sendAgentStateMessage(\n    threadId: string,\n    agentName: string,\n    nodeName: string,\n    runId: string,\n    active: boolean,\n    role: string,\n    state: string,\n    running: boolean,\n  ) {\n    this.next({\n      type: RuntimeEventTypes.AgentStateMessage,\n      threadId,\n      agentName,\n      nodeName,\n      runId,\n      active,\n      role,\n      state,\n      running,\n    });\n  }\n}\n\nexport class RuntimeEventSource {\n  private eventStream$ = new RuntimeEventSubject();\n  private callback!: EventSourceCallback;\n\n  async stream(callback: EventSourceCallback): Promise<void> {\n    this.callback = callback;\n  }\n\n  processRuntimeEvents({\n    serverSideActions,\n    guardrailsResult$,\n    actionInputsWithoutAgents,\n  }: {\n    serverSideActions: Action<any>[];\n    guardrailsResult$?: Subject<GuardrailsResult>;\n    actionInputsWithoutAgents: ActionInput[];\n  }) {\n    this.callback(this.eventStream$).catch((error) => {\n      console.error(\"Error in event source callback\", error);\n    });\n    return this.eventStream$.pipe(\n      // mark tools for server side execution\n      map((event) => {\n        if (event.type === RuntimeEventTypes.ActionExecutionStart) {\n          if (event.scope !== \"passThrough\") {\n            event.scope = serverSideActions.find((action) => action.name === event.actionName)\n              ? \"server\"\n              : \"client\";\n          }\n        }\n        return event;\n      }),\n      // track state\n      scan(\n        (acc, event) => {\n          // It seems like this is needed so that rxjs recognizes the object has changed\n          // This fixes an issue where action were executed multiple times\n          // Not investigating further for now (Markus)\n          acc = { ...acc };\n\n          if (event.type === RuntimeEventTypes.ActionExecutionStart) {\n            acc.callActionServerSide = event.scope === \"server\";\n            acc.args = \"\";\n            acc.actionExecutionId = event.actionExecutionId;\n            if (acc.callActionServerSide) {\n              acc.action = serverSideActions.find((action) => action.name === event.actionName);\n            }\n          } else if (event.type === RuntimeEventTypes.ActionExecutionArgs) {\n            acc.args += event.args;\n          }\n\n          acc.event = event;\n\n          return acc;\n        },\n        {\n          event: null,\n          callActionServerSide: false,\n          args: \"\",\n          actionExecutionId: null,\n          action: null,\n        } as RuntimeEventWithState,\n      ),\n      concatMap((eventWithState) => {\n        if (\n          eventWithState.event!.type === RuntimeEventTypes.ActionExecutionEnd &&\n          eventWithState.callActionServerSide\n        ) {\n          const toolCallEventStream$ = new RuntimeEventSubject();\n          executeAction(\n            toolCallEventStream$,\n            guardrailsResult$ ? guardrailsResult$ : null,\n            eventWithState.action!,\n            eventWithState.args,\n            eventWithState.actionExecutionId,\n            actionInputsWithoutAgents,\n          ).catch((error) => {\n            console.error(error);\n          });\n\n          telemetry.capture(\"oss.runtime.server_action_executed\", {});\n          return concat(of(eventWithState.event!), toolCallEventStream$);\n        } else {\n          return of(eventWithState.event!);\n        }\n      }),\n    );\n  }\n}\n\nasync function executeAction(\n  eventStream$: RuntimeEventSubject,\n  guardrailsResult$: Subject<GuardrailsResult> | null,\n  action: Action<any>,\n  actionArguments: string,\n  actionExecutionId: string,\n  actionInputsWithoutAgents: ActionInput[],\n) {\n  if (guardrailsResult$) {\n    const { status } = await firstValueFrom(guardrailsResult$);\n\n    if (status === \"denied\") {\n      eventStream$.complete();\n      return;\n    }\n  }\n\n  // Prepare arguments for function calling\n  let args: Record<string, any>[] = [];\n  if (actionArguments) {\n    try {\n      args = JSON.parse(actionArguments);\n    } catch (e) {\n      console.warn(\"Action argument unparsable\", { actionArguments });\n    }\n  }\n\n  // handle LangGraph agents\n  if (isLangGraphAgentAction(action)) {\n    eventStream$.sendActionExecutionResult(\n      actionExecutionId,\n      action.name,\n      `${action.name} agent started`,\n    );\n    const stream = await action.langGraphAgentHandler({\n      name: action.name,\n      actionInputsWithoutAgents,\n    });\n\n    // forward to eventStream$\n    from(stream).subscribe({\n      next: (event) => eventStream$.next(event),\n      error: (err) => console.error(\"Error in stream\", err),\n      complete: () => eventStream$.complete(),\n    });\n  } else {\n    // call the function\n    const result = await action.handler?.(args);\n\n    await streamLangChainResponse({\n      result,\n      eventStream$,\n      actionExecution: {\n        name: action.name,\n        id: actionExecutionId,\n      },\n    });\n  }\n}\n","import { TelemetryClient } from \"@copilotkit/shared\";\nconst packageJson = require(\"../../package.json\");\n\nconst telemetryClient = new TelemetryClient({\n  packageName: packageJson.name,\n  packageVersion: packageJson.version,\n});\n\nexport default telemetryClient;\n","import { ReplaySubject, scan, mergeMap, catchError } from \"rxjs\";\nimport { LangGraphEvent, LangGraphEventTypes } from \"./events\";\nimport { RuntimeEvent, RuntimeEventTypes } from \"../../service-adapters/events\";\nimport { randomId } from \"@copilotkit/shared\";\n\ninterface LangGraphEventWithState {\n  event: LangGraphEvent | null;\n  content: string | null;\n  toolCallName: string | null;\n  toolCallId: string | null;\n  toolCallMessageId: string | null;\n  prevToolCallMessageId: string | null;\n  messageId: string | null;\n  prevMessageId: string | null;\n}\n\nexport class RemoteLangGraphEventSource {\n  private eventStream$ = new ReplaySubject<LangGraphEvent>();\n\n  async streamResponse(response: Response) {\n    const reader = response.body!.getReader();\n    const decoder = new TextDecoder();\n    let buffer = [];\n    const eventStream$ = this.eventStream$;\n\n    function flushBuffer() {\n      const currentBuffer = buffer.join(\"\");\n      if (currentBuffer.trim().length === 0) {\n        return;\n      }\n      const parts = currentBuffer.split(\"\\n\");\n      if (parts.length === 0) {\n        return;\n      }\n\n      const lastPartIsComplete = currentBuffer.endsWith(\"\\n\");\n\n      // truncate buffer\n      buffer = [];\n\n      if (!lastPartIsComplete) {\n        // put back the last part\n        buffer.push(parts.pop());\n      }\n\n      parts\n        .map((part) => part.trim())\n        .filter((part) => part != \"\")\n        .forEach((part) => {\n          eventStream$.next(JSON.parse(part));\n        });\n    }\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (!done) {\n          buffer.push(decoder.decode(value, { stream: true }));\n        }\n\n        flushBuffer();\n\n        if (done) {\n          break;\n        }\n      }\n    } catch (error) {\n      console.error(\"Error in stream\", error);\n      eventStream$.error(error);\n      return;\n    }\n    eventStream$.complete();\n  }\n\n  private shouldEmitToolCall(\n    shouldEmitToolCalls: string | string[] | boolean,\n    toolCallName: string,\n  ) {\n    if (typeof shouldEmitToolCalls === \"boolean\") {\n      return shouldEmitToolCalls;\n    }\n    if (Array.isArray(shouldEmitToolCalls)) {\n      return shouldEmitToolCalls.includes(toolCallName);\n    }\n    return shouldEmitToolCalls === toolCallName;\n  }\n\n  processLangGraphEvents() {\n    let lastEventWithState: LangGraphEventWithState | null = null;\n\n    return this.eventStream$.pipe(\n      scan(\n        (acc, event) => {\n          if (event.event === LangGraphEventTypes.OnChatModelStream) {\n            // @ts-ignore\n            const content = event.data?.chunk?.kwargs?.content ?? event.data?.chunk?.content;\n\n            if (typeof content === \"string\") {\n              acc.content = content;\n            } else if (Array.isArray(content) && content.length > 0) {\n              acc.content = content[0].text;\n            } else {\n              acc.content = null;\n            }\n\n            if (event.data?.chunk?.kwargs?.tool_call_chunks) {\n              acc.prevToolCallMessageId = acc.toolCallMessageId;\n              acc.toolCallMessageId = event.data.chunk.kwargs?.id;\n              if (event.data.chunk.kwargs.tool_call_chunks[0]?.name) {\n                acc.toolCallName = event.data.chunk.kwargs.tool_call_chunks[0].name;\n              }\n              if (event.data.chunk.kwargs.tool_call_chunks[0]?.id) {\n                acc.toolCallId = event.data.chunk.kwargs.tool_call_chunks[0].id;\n              }\n              acc.prevMessageId = acc.messageId;\n              acc.messageId = event.data?.chunk?.kwargs?.id;\n            } else if (acc.content && acc.content != \"\") {\n              acc.prevMessageId = acc.messageId;\n              acc.messageId = event.data?.chunk?.kwargs?.id;\n            } else {\n              acc.prevToolCallMessageId = acc.toolCallMessageId;\n              acc.prevMessageId = acc.messageId;\n            }\n          } else {\n            acc.prevToolCallMessageId = acc.toolCallMessageId;\n            acc.toolCallMessageId = null;\n            acc.prevMessageId = acc.messageId;\n            acc.messageId = null;\n            acc.toolCallName = null;\n          }\n\n          acc.event = event;\n          lastEventWithState = acc; // Capture the state\n          return acc;\n        },\n        {\n          event: null,\n          toolCallId: null,\n          toolCallMessageId: null,\n          prevToolCallMessageId: null,\n          messageId: null,\n          toolCallName: null,\n          prevMessageId: null,\n          content: null,\n        } as LangGraphEventWithState,\n      ),\n      mergeMap((eventWithState): RuntimeEvent[] => {\n        const events: RuntimeEvent[] = [];\n\n        let shouldEmitMessages = true;\n        let shouldEmitToolCalls: string | string[] | boolean = false;\n\n        if (eventWithState.event.event == LangGraphEventTypes.OnChatModelStream) {\n          if (\"copilotkit:emit-tool-calls\" in (eventWithState.event.metadata || {})) {\n            shouldEmitToolCalls = eventWithState.event.metadata[\"copilotkit:emit-tool-calls\"];\n          }\n          if (\"copilotkit:emit-messages\" in (eventWithState.event.metadata || {})) {\n            shouldEmitMessages = eventWithState.event.metadata[\"copilotkit:emit-messages\"];\n          }\n        }\n\n        // Tool call ended: emit ActionExecutionEnd\n        if (\n          eventWithState.prevToolCallMessageId !== null &&\n          eventWithState.prevToolCallMessageId !== eventWithState.toolCallMessageId &&\n          this.shouldEmitToolCall(shouldEmitToolCalls, eventWithState.toolCallName)\n        ) {\n          events.push({\n            type: RuntimeEventTypes.ActionExecutionEnd,\n          });\n        }\n\n        // Message ended: emit TextMessageEnd\n        if (\n          eventWithState.prevMessageId !== null &&\n          eventWithState.prevMessageId !== eventWithState.messageId &&\n          shouldEmitMessages\n        ) {\n          events.push({\n            type: RuntimeEventTypes.TextMessageEnd,\n          });\n        }\n\n        switch (eventWithState.event!.event) {\n          case LangGraphEventTypes.OnCopilotKitEmitMessage:\n            events.push({\n              type: RuntimeEventTypes.TextMessageStart,\n              messageId: eventWithState.event.message_id,\n            });\n            events.push({\n              type: RuntimeEventTypes.TextMessageContent,\n              content: eventWithState.event.message,\n            });\n            events.push({\n              type: RuntimeEventTypes.TextMessageEnd,\n            });\n            break;\n          case LangGraphEventTypes.OnCopilotKitEmitToolCall:\n            events.push({\n              type: RuntimeEventTypes.ActionExecutionStart,\n              actionExecutionId: eventWithState.event.id,\n              actionName: eventWithState.event.name,\n            });\n            events.push({\n              type: RuntimeEventTypes.ActionExecutionArgs,\n              args: JSON.stringify(eventWithState.event.args),\n            });\n            events.push({\n              type: RuntimeEventTypes.ActionExecutionEnd,\n            });\n            break;\n          case LangGraphEventTypes.OnCopilotKitStateSync:\n            events.push({\n              type: RuntimeEventTypes.AgentStateMessage,\n              threadId: eventWithState.event.thread_id,\n              role: eventWithState.event.role,\n              agentName: eventWithState.event.agent_name,\n              nodeName: eventWithState.event.node_name,\n              runId: eventWithState.event.run_id,\n              active: eventWithState.event.active,\n              state: JSON.stringify(eventWithState.event.state),\n              running: eventWithState.event.running,\n            });\n            break;\n          case LangGraphEventTypes.OnToolEnd:\n            // TODO-AGENTS: emit ActionExecutionResult when needed\n            // Need a special tool node for that?\n\n            // const result = eventWithState.event.data?.output?.kwargs?.content?.[0];\n            // const toolCallId = eventWithState.event.data?.output?.kwargs?.tool_call_id;\n            // const toolCallName = eventWithState.event.data?.output?.kwargs?.name;\n            // if (result && toolCallId && toolCallName) {\n            //   events.push({\n            //     type: RuntimeEventTypes.ActionExecutionResult,\n            //     actionExecutionId: toolCallId,\n            //     actionName: toolCallName,\n            //     result,\n            //   });\n            // }\n            break;\n          case LangGraphEventTypes.OnChatModelStream:\n            if (\n              eventWithState.toolCallMessageId !== null &&\n              eventWithState.prevToolCallMessageId !== eventWithState.toolCallMessageId\n            ) {\n              if (this.shouldEmitToolCall(shouldEmitToolCalls, eventWithState.toolCallName)) {\n                events.push({\n                  type: RuntimeEventTypes.ActionExecutionStart,\n                  actionExecutionId: eventWithState.toolCallMessageId,\n                  actionName: eventWithState.toolCallName,\n                  scope: \"client\",\n                });\n              }\n            }\n            // Message started: emit TextMessageStart\n            else if (\n              eventWithState.messageId !== null &&\n              eventWithState.prevMessageId !== eventWithState.messageId\n            ) {\n              if (shouldEmitMessages) {\n                events.push({\n                  type: RuntimeEventTypes.TextMessageStart,\n                  messageId: eventWithState.messageId,\n                });\n              }\n            }\n\n            const args = eventWithState.event.data?.chunk?.kwargs?.tool_call_chunks?.[0]?.args;\n            const content = eventWithState.content;\n\n            // Tool call args: emit ActionExecutionArgs\n            if (args) {\n              if (this.shouldEmitToolCall(shouldEmitToolCalls, eventWithState.toolCallName)) {\n                events.push({\n                  type: RuntimeEventTypes.ActionExecutionArgs,\n                  args,\n                });\n              }\n            }\n            // Message content: emit TextMessageContent\n            else if (eventWithState.messageId !== null && content) {\n              if (shouldEmitMessages) {\n                events.push({\n                  type: RuntimeEventTypes.TextMessageContent,\n                  content,\n                });\n              }\n            }\n            break;\n        }\n        return events;\n      }),\n      catchError((error) => {\n        console.error(error);\n        const events: RuntimeEvent[] = [];\n\n        if (lastEventWithState?.messageId) {\n          events.push({\n            type: RuntimeEventTypes.TextMessageEnd,\n          });\n        }\n        if (lastEventWithState?.toolCallMessageId) {\n          events.push({\n            type: RuntimeEventTypes.ActionExecutionEnd,\n          });\n        }\n\n        const messageId = randomId();\n\n        events.push({\n          type: RuntimeEventTypes.TextMessageStart,\n          messageId: messageId,\n        });\n        events.push({\n          type: RuntimeEventTypes.TextMessageContent,\n          content: \"❌ An error occurred. Please try again.\",\n        });\n        events.push({\n          type: RuntimeEventTypes.TextMessageEnd,\n        });\n\n        return events;\n      }),\n    );\n  }\n}\n","export enum LangGraphEventTypes {\n  OnChainStart = \"on_chain_start\",\n  OnChainStream = \"on_chain_stream\",\n  OnChainEnd = \"on_chain_end\",\n  OnChatModelStart = \"on_chat_model_start\",\n  OnChatModelStream = \"on_chat_model_stream\",\n  OnChatModelEnd = \"on_chat_model_end\",\n  OnToolStart = \"on_tool_start\",\n  OnToolEnd = \"on_tool_end\",\n  OnCopilotKitStateSync = \"on_copilotkit_state_sync\",\n  OnCopilotKitEmitMessage = \"on_copilotkit_emit_message\",\n  OnCopilotKitEmitToolCall = \"on_copilotkit_emit_tool_call\",\n}\n\ntype LangGraphOnCopilotKitStateSyncEvent = {\n  event: LangGraphEventTypes.OnCopilotKitStateSync;\n  thread_id: string;\n  agent_name: string;\n  node_name: string;\n  run_id: string;\n  active: boolean;\n  role: string;\n  state: any;\n  running: boolean;\n};\n\ntype LangGraphOnCopilotKitManualMessageEvent = {\n  event: LangGraphEventTypes.OnCopilotKitEmitMessage;\n  message: string;\n  message_id: string;\n};\n\ntype LangGraphOnCopilotKitEmitToolCallEvent = {\n  event: LangGraphEventTypes.OnCopilotKitEmitToolCall;\n  name: string;\n  args: any;\n  id: string;\n};\n\ntype LangGraphOnChainStartEvent = {\n  event: LangGraphEventTypes.OnChainStart;\n  run_id: string;\n  name: string;\n  tags: string[];\n  metadata: { thread_id: string };\n  data: {\n    input: any;\n  };\n  parent_ids: string[];\n};\n\ntype LangGraphOnChainEndEvent = {\n  event: LangGraphEventTypes.OnChainEnd;\n  name: string;\n  run_id: string;\n  tags: string[];\n  metadata: {\n    thread_id: string;\n    langgraph_step: number;\n    langgraph_node: string;\n    langgraph_triggers: string[];\n    langgraph_task_idx: number;\n    thread_ts: string;\n  };\n  data: {\n    input: any;\n    output: any;\n  };\n  parent_ids: string[];\n};\n\ntype LangGraphOnChatModelStartEvent = {\n  event: LangGraphEventTypes.OnChatModelStart;\n  name: string;\n  run_id: string;\n  tags: string[];\n  metadata: {\n    thread_id: string;\n    langgraph_step: number;\n    langgraph_node: string;\n    langgraph_triggers: string[];\n    langgraph_task_idx: number;\n    thread_ts: string;\n    ls_provider: string;\n    ls_model_name: string;\n    ls_model_type: string;\n    ls_temperature: number;\n  };\n  data: {\n    input: {\n      messages: {\n        lc: number;\n        type: string;\n        id: string[];\n        kwargs: {\n          content: string;\n          type: string;\n          id: string;\n        };\n      }[][];\n    };\n  };\n  parent_ids: string[];\n};\n\ntype LangGraphOnChatModelStreamEvent = {\n  event: LangGraphEventTypes.OnChatModelStream;\n  name: string;\n  run_id: string;\n  tags: string[];\n  metadata: {\n    thread_id: string;\n    langgraph_step: number;\n    langgraph_node: string;\n    langgraph_triggers: string[];\n    langgraph_task_idx: number;\n    thread_ts: string;\n    ls_provider: string;\n    ls_model_name: string;\n    ls_model_type: string;\n    ls_temperature: number;\n  };\n  data: {\n    chunk: {\n      lc: number;\n      type: string;\n      id: string[];\n      kwargs: {\n        content: string | { text: string; type: string; index: number }[];\n        additional_kwargs: {\n          tool_calls: {\n            index: number;\n            id: string;\n            function: { arguments: string; name: string };\n            type: string;\n          }[];\n        };\n        type: string;\n        id: string;\n        tool_calls: { name: string; args: {}; id: string; type: string }[];\n        tool_call_chunks: {\n          name: string;\n          args: string;\n          id: string;\n          index: number;\n          type: string;\n        }[];\n        invalid_tool_calls: any[];\n      };\n    };\n  };\n  parent_ids: string[];\n};\n\ntype LangGraphOnChatModelEndEvent = {\n  event: LangGraphEventTypes.OnChatModelEnd;\n  name: string;\n  run_id: string;\n  tags: string[];\n  metadata: {\n    thread_id: string;\n    langgraph_step: number;\n    langgraph_node: string;\n    langgraph_triggers: string[];\n    langgraph_task_idx: number;\n    thread_ts: string;\n    ls_provider: string;\n    ls_model_name: string;\n    ls_model_type: string;\n    ls_temperature: number;\n  };\n  data: {\n    input: any;\n    output: {\n      generations: {\n        text: string;\n        generation_info: {\n          finish_reason: string;\n          model_name: string;\n          system_fingerprint: string;\n        };\n        type: string;\n        message: {\n          lc: number;\n          type: string;\n          id: string[];\n          kwargs: {\n            content: string;\n            additional_kwargs: {\n              tool_calls: {\n                index: number;\n                id: string;\n                function: { arguments: string; name: string };\n                type: string;\n              }[];\n            };\n            response_metadata: {\n              finish_reason: string;\n              model_name: string;\n              system_fingerprint: string;\n            };\n            type: string;\n            id: string;\n            tool_calls: { name: string; args: { query: string }; id: string; type: string }[];\n            invalid_tool_calls: any[];\n          };\n        };\n      }[][];\n      llm_output: any;\n      run: any;\n    };\n  };\n  parent_ids: string[];\n};\n\ntype LangGraphOnChainStreamEvent = {\n  event: LangGraphEventTypes.OnChainStream;\n  name: string;\n  run_id: string;\n  tags: string[];\n  metadata: {\n    thread_id: string;\n    langgraph_step?: number;\n    langgraph_node?: string;\n    langgraph_triggers?: string[];\n    langgraph_task_idx?: number;\n    thread_ts?: string;\n  };\n  data: {\n    chunk: {\n      messages: {\n        lc: number;\n        type: string;\n        id: string[];\n        kwargs: {\n          content: string;\n          additional_kwargs?: {\n            tool_calls?: {\n              index: number;\n              id: string;\n              function: { arguments: string; name: string };\n              type: string;\n            }[];\n          };\n          response_metadata?: {\n            finish_reason: string;\n            model_name: string;\n            system_fingerprint: string;\n          };\n          type: string;\n          id: string;\n          tool_calls?: { name: string; args: { query: string }; id: string; type: string }[];\n          invalid_tool_calls?: any[];\n        };\n      }[];\n    };\n  };\n  parent_ids: string[];\n};\n\ntype LangGraphOnToolStartEvent = {\n  event: LangGraphEventTypes.OnToolStart;\n  name: string;\n  run_id: string;\n  tags: string[];\n  metadata: {\n    thread_id: string;\n    langgraph_step: number;\n    langgraph_node: string;\n    langgraph_triggers: string[];\n    langgraph_task_idx: number;\n    thread_ts: string;\n  };\n  data: {\n    input: {\n      query: string;\n    };\n  };\n  parent_ids: string[];\n};\n\ntype LangGraphOnToolEndEvent = {\n  event: LangGraphEventTypes.OnToolEnd;\n  name: string;\n  run_id: string;\n  tags: string[];\n  metadata: {\n    thread_id: string;\n    langgraph_step: number;\n    langgraph_node: string;\n    langgraph_triggers: string[];\n    langgraph_task_idx: number;\n    thread_ts: string;\n  };\n  data: {\n    input: {\n      query: string;\n    };\n    output: {\n      lc: number;\n      type: string;\n      id: string[];\n      kwargs: {\n        content: string[];\n        type: string;\n        name: string;\n        tool_call_id: string;\n        status: string;\n      };\n    };\n  };\n  parent_ids: string[];\n};\n\nexport type LangGraphEvent =\n  | LangGraphOnChainStartEvent\n  | LangGraphOnChainStreamEvent\n  | LangGraphOnChainEndEvent\n  | LangGraphOnChatModelStartEvent\n  | LangGraphOnChatModelStreamEvent\n  | LangGraphOnChatModelEndEvent\n  | LangGraphOnToolStartEvent\n  | LangGraphOnToolEndEvent\n  | LangGraphOnCopilotKitStateSyncEvent\n  | LangGraphOnCopilotKitManualMessageEvent\n  | LangGraphOnCopilotKitEmitToolCallEvent;\n","import { Action } from \"@copilotkit/shared\";\nimport { GraphQLContext } from \"../integrations/shared\";\nimport { Logger } from \"pino\";\nimport telemetry from \"../../lib/telemetry-client\";\nimport { Message } from \"../../graphql/types/converted\";\nimport { RuntimeEvent, RuntimeEventSubject } from \"../../service-adapters/events\";\nimport { RemoteLangGraphEventSource } from \"../../agents/langgraph/event-source\";\nimport { Observable } from \"rxjs\";\nimport { ActionInput } from \"../../graphql/inputs/action.input\";\nimport { AgentStateInput } from \"../../graphql/inputs/agent-state.input\";\n\nexport type RemoteActionDefinition = {\n  url: string;\n  onBeforeRequest?: ({ ctx }: { ctx: GraphQLContext }) => {\n    headers?: Record<string, string> | undefined;\n  };\n};\n\nexport type RemoteActionInfoResponse = {\n  actions: any[];\n  agents: any[];\n};\n\nexport type LangGraphAgentHandlerParams = {\n  name: string;\n  actionInputsWithoutAgents: ActionInput[];\n  threadId?: string;\n  nodeName?: string;\n};\n\nexport type LangGraphAgentAction = Action<any> & {\n  langGraphAgentHandler: (params: LangGraphAgentHandlerParams) => Promise<Observable<RuntimeEvent>>;\n};\n\nexport function isLangGraphAgentAction(action: Action<any>): action is LangGraphAgentAction {\n  if (!action) {\n    return false;\n  }\n  return typeof (action as LangGraphAgentAction).langGraphAgentHandler === \"function\";\n}\n\nfunction createHeaders(\n  onBeforeRequest: RemoteActionDefinition[\"onBeforeRequest\"],\n  graphqlContext: GraphQLContext,\n) {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n  };\n\n  if (onBeforeRequest) {\n    const { headers: additionalHeaders } = onBeforeRequest({ ctx: graphqlContext });\n    if (additionalHeaders) {\n      Object.assign(headers, additionalHeaders);\n    }\n  }\n\n  return headers;\n}\n\nasync function fetchRemoteInfo({\n  url,\n  onBeforeRequest,\n  graphqlContext,\n  logger,\n  frontendUrl,\n}: {\n  url: string;\n  onBeforeRequest?: RemoteActionDefinition[\"onBeforeRequest\"];\n  graphqlContext: GraphQLContext;\n  logger: Logger;\n  frontendUrl?: string;\n}): Promise<RemoteActionInfoResponse> {\n  logger.debug({ url }, \"Fetching actions from url\");\n  const headers = createHeaders(onBeforeRequest, graphqlContext);\n\n  try {\n    const response = await fetch(`${url}/info`, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({ properties: graphqlContext.properties, frontendUrl }),\n    });\n\n    if (!response.ok) {\n      logger.error(\n        { url, status: response.status, body: await response.text() },\n        \"Failed to fetch actions from url\",\n      );\n      return { actions: [], agents: [] };\n    }\n\n    const json = await response.json();\n    logger.debug({ json }, \"Fetched actions from url\");\n    return json;\n  } catch (error) {\n    logger.error(\n      { error: error.message ? error.message : error + \"\" },\n      \"Failed to fetch actions from url\",\n    );\n    return { actions: [], agents: [] };\n  }\n}\n\nfunction constructRemoteActions({\n  json,\n  url,\n  onBeforeRequest,\n  graphqlContext,\n  logger,\n  messages,\n  agentStates,\n}: {\n  json: RemoteActionInfoResponse;\n  url: string;\n  onBeforeRequest?: RemoteActionDefinition[\"onBeforeRequest\"];\n  graphqlContext: GraphQLContext;\n  logger: Logger;\n  messages: Message[];\n  agentStates?: AgentStateInput[];\n}): Action<any>[] {\n  const actions = json[\"actions\"].map((action) => ({\n    name: action.name,\n    description: action.description,\n    parameters: action.parameters,\n    handler: async (args: any) => {\n      logger.debug({ actionName: action.name, args }, \"Executing remote action\");\n\n      const headers = createHeaders(onBeforeRequest, graphqlContext);\n      telemetry.capture(\"oss.runtime.remote_action_executed\", {});\n\n      try {\n        const response = await fetch(`${url}/actions/execute`, {\n          method: \"POST\",\n          headers,\n          body: JSON.stringify({\n            name: action.name,\n            arguments: args,\n            properties: graphqlContext.properties,\n          }),\n        });\n\n        if (!response.ok) {\n          logger.error(\n            { url, status: response.status, body: await response.text() },\n            \"Failed to execute remote action\",\n          );\n          return \"Failed to execute remote action\";\n        }\n\n        const requestResult = await response.json();\n\n        const result = requestResult[\"result\"];\n        logger.debug({ actionName: action.name, result }, \"Executed remote action\");\n        return result;\n      } catch (error) {\n        logger.error(\n          { error: error.message ? error.message : error + \"\" },\n          \"Failed to execute remote action\",\n        );\n        return \"Failed to execute remote action\";\n      }\n    },\n  }));\n\n  const agents = json[\"agents\"].map((agent) => ({\n    name: agent.name,\n    description: agent.description,\n    parameters: [],\n    handler: async (_args: any) => {},\n\n    langGraphAgentHandler: async ({\n      name,\n      actionInputsWithoutAgents,\n      threadId,\n      nodeName,\n    }: LangGraphAgentHandlerParams): Promise<Observable<RuntimeEvent>> => {\n      logger.debug({ actionName: agent.name }, \"Executing remote agent\");\n\n      const headers = createHeaders(onBeforeRequest, graphqlContext);\n      telemetry.capture(\"oss.runtime.remote_action_executed\", {});\n\n      let state = {};\n      if (agentStates) {\n        const jsonState = agentStates.find((state) => state.agentName === name)?.state;\n        if (jsonState) {\n          state = JSON.parse(jsonState);\n        }\n      }\n\n      const response = await fetch(`${url}/agents/execute`, {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify({\n          name,\n          threadId,\n          nodeName,\n          messages,\n          state,\n          properties: graphqlContext.properties,\n          actions: actionInputsWithoutAgents.map((action) => ({\n            name: action.name,\n            description: action.description,\n            parameters: JSON.parse(action.jsonSchema),\n          })),\n        }),\n      });\n\n      if (!response.ok) {\n        logger.error(\n          { url, status: response.status, body: await response.text() },\n          \"Failed to execute remote agent\",\n        );\n        throw new Error(\"Failed to execute remote agent\");\n      }\n\n      const eventSource = new RemoteLangGraphEventSource();\n      eventSource.streamResponse(response);\n      return eventSource.processLangGraphEvents();\n    },\n  }));\n\n  return [...actions, ...agents];\n}\n\nexport async function setupRemoteActions({\n  remoteActionDefinitions,\n  graphqlContext,\n  messages,\n  agentStates,\n  frontendUrl,\n}: {\n  remoteActionDefinitions: RemoteActionDefinition[];\n  graphqlContext: GraphQLContext;\n  messages: Message[];\n  agentStates?: AgentStateInput[];\n  frontendUrl?: string;\n}): Promise<Action[]> {\n  const logger = graphqlContext.logger.child({ component: \"remote-actions.fetchRemoteActions\" });\n  logger.debug({ remoteActionDefinitions }, \"Fetching remote actions\");\n\n  // Remove duplicates of remoteActionDefinitions.url\n  const filtered = remoteActionDefinitions.filter(\n    (value, index, self) => index === self.findIndex((t) => t.url === value.url),\n  );\n\n  const result = await Promise.all(\n    filtered.map(async (actionDefinition) => {\n      const json = await fetchRemoteInfo({\n        url: actionDefinition.url,\n        onBeforeRequest: actionDefinition.onBeforeRequest,\n        graphqlContext,\n        logger: logger.child({ component: \"remote-actions.fetchActionsFromUrl\", actionDefinition }),\n        frontendUrl,\n      });\n      return constructRemoteActions({\n        json,\n        messages,\n        url: actionDefinition.url,\n        onBeforeRequest: actionDefinition.onBeforeRequest,\n        graphqlContext,\n        logger: logger.child({ component: \"remote-actions.constructActions\", actionDefinition }),\n        agentStates,\n      });\n    }),\n  );\n\n  return result.flat();\n}\n","import { Field, InputType } from \"type-graphql\";\n\n@InputType()\nexport class BaseMessageInput {\n  @Field(() => String)\n  id: string;\n\n  @Field(() => Date)\n  createdAt: Date;\n}\n","import {\n  ActionExecutionMessageInput,\n  ResultMessageInput,\n  TextMessageInput,\n  AgentStateMessageInput,\n} from \"../../inputs/message.input\";\nimport { BaseMessageInput } from \"../base\";\nimport { ActionExecutionScope, MessageRole } from \"../enums\";\n\ntype MessageType = \"TextMessage\" | \"ActionExecutionMessage\" | \"ResultMessage\" | \"AgentStateMessage\";\n\nexport class Message extends BaseMessageInput {\n  type: MessageType;\n\n  isTextMessage(): this is TextMessage {\n    return this.type === \"TextMessage\";\n  }\n\n  isActionExecutionMessage(): this is ActionExecutionMessage {\n    return this.type === \"ActionExecutionMessage\";\n  }\n\n  isResultMessage(): this is ResultMessage {\n    return this.type === \"ResultMessage\";\n  }\n\n  isAgentStateMessage(): this is AgentStateMessage {\n    return this.type === \"AgentStateMessage\";\n  }\n}\n\nexport class TextMessage extends Message implements TextMessageInput {\n  type: MessageType = \"TextMessage\";\n  content: string;\n  role: MessageRole;\n}\n\nexport class ActionExecutionMessage\n  extends Message\n  implements Omit<ActionExecutionMessageInput, \"arguments\">\n{\n  type: MessageType = \"ActionExecutionMessage\";\n  name: string;\n  arguments: Record<string, any>;\n  scope: ActionExecutionScope;\n}\n\nexport class ResultMessage extends Message implements ResultMessageInput {\n  type: MessageType = \"ResultMessage\";\n  actionExecutionId: string;\n  actionName: string;\n  result: string;\n}\n\nexport class AgentStateMessage extends Message implements Omit<AgentStateMessageInput, \"state\"> {\n  type: MessageType = \"AgentStateMessage\";\n  threadId: string;\n  agentName: string;\n  nodeName: string;\n  runId: string;\n  active: boolean;\n  role: MessageRole;\n  state: any;\n  running: boolean;\n}\n","import {\n  ActionExecutionMessage,\n  Message,\n  ResultMessage,\n  TextMessage,\n  AgentStateMessage,\n} from \"../graphql/types/converted\";\nimport { MessageInput } from \"../graphql/inputs/message.input\";\nimport { plainToInstance } from \"class-transformer\";\n\nexport function convertGqlInputToMessages(inputMessages: MessageInput[]): Message[] {\n  const messages: Message[] = [];\n\n  for (const message of inputMessages) {\n    if (message.textMessage) {\n      messages.push(\n        plainToInstance(TextMessage, {\n          id: message.id,\n          createdAt: message.createdAt,\n          role: message.textMessage.role,\n          content: message.textMessage.content,\n        }),\n      );\n    } else if (message.actionExecutionMessage) {\n      messages.push(\n        plainToInstance(ActionExecutionMessage, {\n          id: message.id,\n          createdAt: message.createdAt,\n          name: message.actionExecutionMessage.name,\n          arguments: JSON.parse(message.actionExecutionMessage.arguments),\n          scope: message.actionExecutionMessage.scope,\n        }),\n      );\n    } else if (message.resultMessage) {\n      messages.push(\n        plainToInstance(ResultMessage, {\n          id: message.id,\n          createdAt: message.createdAt,\n          actionExecutionId: message.resultMessage.actionExecutionId,\n          actionName: message.resultMessage.actionName,\n          result: message.resultMessage.result,\n        }),\n      );\n    } else if (message.agentStateMessage) {\n      messages.push(\n        plainToInstance(AgentStateMessage, {\n          id: message.id,\n          threadId: message.agentStateMessage.threadId,\n          createdAt: message.createdAt,\n          agentName: message.agentStateMessage.agentName,\n          nodeName: message.agentStateMessage.nodeName,\n          runId: message.agentStateMessage.runId,\n          active: message.agentStateMessage.active,\n          role: message.agentStateMessage.role,\n          state: JSON.parse(message.agentStateMessage.state),\n          running: message.agentStateMessage.running,\n        }),\n      );\n    }\n  }\n\n  return messages;\n}\n","import { YogaInitialContext } from \"graphql-yoga\";\nimport { buildSchemaSync } from \"type-graphql\";\nimport { CopilotResolver } from \"../../graphql/resolvers/copilot.resolver\";\nimport { useDeferStream } from \"@graphql-yoga/plugin-defer-stream\";\nimport { CopilotRuntime } from \"../runtime/copilot-runtime\";\nimport { CopilotServiceAdapter } from \"../../service-adapters\";\nimport { CopilotCloudOptions } from \"../cloud\";\nimport { LogLevel, createLogger } from \"../../lib/logger\";\nimport { createYoga } from \"graphql-yoga\";\nimport telemetry from \"../telemetry-client\";\n\nconst logger = createLogger();\n\ntype AnyPrimitive = string | boolean | number | null;\nexport type CopilotRequestContextProperties = Record<\n  string,\n  AnyPrimitive | Record<string, AnyPrimitive>\n>;\n\nexport type GraphQLContext = YogaInitialContext & {\n  _copilotkit: CreateCopilotRuntimeServerOptions;\n  properties: CopilotRequestContextProperties;\n  logger: typeof logger;\n};\n\nexport interface CreateCopilotRuntimeServerOptions {\n  runtime: CopilotRuntime<any>;\n  serviceAdapter: CopilotServiceAdapter;\n  endpoint: string;\n  baseUrl?: string;\n  cloud?: CopilotCloudOptions;\n  properties?: CopilotRequestContextProperties;\n  logLevel?: LogLevel;\n}\n\nexport async function createContext(\n  initialContext: YogaInitialContext,\n  copilotKitContext: CreateCopilotRuntimeServerOptions,\n  contextLogger: typeof logger,\n  properties: CopilotRequestContextProperties = {},\n): Promise<Partial<GraphQLContext>> {\n  logger.debug({ copilotKitContext }, \"Creating GraphQL context\");\n  const ctx: GraphQLContext = {\n    ...initialContext,\n    _copilotkit: {\n      ...copilotKitContext,\n    },\n    properties: { ...properties },\n    logger: contextLogger,\n  };\n  return ctx;\n}\n\nexport function buildSchema(\n  options: {\n    emitSchemaFile?: string;\n  } = {},\n) {\n  logger.debug(\"Building GraphQL schema...\");\n  const schema = buildSchemaSync({\n    resolvers: [CopilotResolver],\n    emitSchemaFile: options.emitSchemaFile,\n  });\n  logger.debug(\"GraphQL schema built successfully\");\n  return schema;\n}\n\nexport type CommonConfig = {\n  logging: typeof logger;\n  schema: ReturnType<typeof buildSchema>;\n  plugins: Parameters<typeof createYoga>[0][\"plugins\"];\n  context: (ctx: YogaInitialContext) => Promise<Partial<GraphQLContext>>;\n};\n\nexport function getCommonConfig(options: CreateCopilotRuntimeServerOptions): CommonConfig {\n  const logLevel = (process.env.LOG_LEVEL as LogLevel) || (options.logLevel as LogLevel) || \"error\";\n  const logger = createLogger({ level: logLevel, component: \"getCommonConfig\" });\n\n  const contextLogger = createLogger({ level: logLevel });\n\n  if (options.cloud) {\n    telemetry.setCloudConfiguration({\n      publicApiKey: options.cloud.publicApiKey,\n      baseUrl: options.cloud.baseUrl,\n    });\n  }\n\n  if (options.properties?._copilotkit) {\n    telemetry.setGlobalProperties({\n      _copilotkit: {\n        ...(options.properties._copilotkit as Record<string, any>),\n      },\n    });\n  }\n\n  telemetry.setGlobalProperties({\n    runtime: {\n      serviceAdapter: options.serviceAdapter.constructor.name,\n    },\n  });\n\n  return {\n    logging: createLogger({ component: \"Yoga GraphQL\", level: logLevel }),\n    schema: buildSchema(),\n    plugins: [useDeferStream()],\n    context: (ctx: YogaInitialContext): Promise<Partial<GraphQLContext>> =>\n      createContext(ctx, options, contextLogger, options.properties),\n  };\n}\n","import { Arg, Ctx, Mutation, Query, Resolver } from \"type-graphql\";\nimport {\n  ReplaySubject,\n  Subject,\n  Subscription,\n  finalize,\n  firstValueFrom,\n  shareReplay,\n  skipWhile,\n  take,\n  takeWhile,\n  tap,\n} from \"rxjs\";\nimport { GenerateCopilotResponseInput } from \"../inputs/generate-copilot-response.input\";\nimport { CopilotResponse } from \"../types/copilot-response.type\";\nimport { MessageRole } from \"../types/enums\";\nimport { Repeater } from \"graphql-yoga\";\nimport type { CopilotRequestContextProperties, GraphQLContext } from \"../../lib/integrations\";\nimport { RuntimeEvent, RuntimeEventTypes } from \"../../service-adapters/events\";\nimport {\n  FailedMessageStatus,\n  MessageStatusUnion,\n  SuccessMessageStatus,\n} from \"../types/message-status.type\";\nimport { ResponseStatusUnion, SuccessResponseStatus } from \"../types/response-status.type\";\nimport { GraphQLJSONObject } from \"graphql-scalars\";\nimport { plainToInstance } from \"class-transformer\";\nimport { GuardrailsResult } from \"../types/guardrails-result.type\";\nimport { GraphQLError } from \"graphql\";\nimport {\n  GuardrailsValidationFailureResponse,\n  MessageStreamInterruptedResponse,\n  UnknownErrorResponse,\n} from \"../../utils\";\nimport {\n  ActionExecutionMessage,\n  AgentStateMessage,\n  Message,\n  ResultMessage,\n  TextMessage,\n} from \"../types/converted\";\nimport telemetry from \"../../lib/telemetry-client\";\nimport { randomId } from \"@copilotkit/shared\";\n\nconst invokeGuardrails = async ({\n  baseUrl,\n  copilotCloudPublicApiKey,\n  data,\n  onResult,\n  onError,\n}: {\n  baseUrl: string;\n  copilotCloudPublicApiKey: string;\n  data: GenerateCopilotResponseInput;\n  onResult: (result: GuardrailsResult) => void;\n  onError: (err: Error) => void;\n}) => {\n  if (\n    data.messages.length &&\n    data.messages[data.messages.length - 1].textMessage?.role === MessageRole.user\n  ) {\n    const messages = data.messages\n      .filter(\n        (m) =>\n          m.textMessage !== undefined &&\n          (m.textMessage.role === MessageRole.user || m.textMessage.role === MessageRole.assistant),\n      )\n      .map((m) => ({\n        role: m.textMessage!.role,\n        content: m.textMessage.content,\n      }));\n\n    const lastMessage = messages[messages.length - 1];\n    const restOfMessages = messages.slice(0, -1);\n\n    const body = {\n      input: lastMessage.content,\n      validTopics: data.cloud.guardrails.inputValidationRules.allowList,\n      invalidTopics: data.cloud.guardrails.inputValidationRules.denyList,\n      messages: restOfMessages,\n    };\n\n    const guardrailsResult = await fetch(`${baseUrl}/guardrails/validate`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CopilotCloud-Public-API-Key\": copilotCloudPublicApiKey,\n      },\n      body: JSON.stringify(body),\n    });\n\n    if (guardrailsResult.ok) {\n      const resultJson: GuardrailsResult = await guardrailsResult.json();\n      onResult(resultJson);\n    } else {\n      onError(await guardrailsResult.json());\n    }\n  }\n};\n\n@Resolver(() => CopilotResponse)\nexport class CopilotResolver {\n  @Query(() => String)\n  async hello() {\n    return \"Hello World\";\n  }\n\n  @Mutation(() => CopilotResponse)\n  async generateCopilotResponse(\n    @Ctx() ctx: GraphQLContext,\n    @Arg(\"data\") data: GenerateCopilotResponseInput,\n    @Arg(\"properties\", () => GraphQLJSONObject, { nullable: true })\n    properties?: CopilotRequestContextProperties,\n  ) {\n    telemetry.capture(\"oss.runtime.copilot_request_created\", {\n      \"cloud.guardrails.enabled\": data.cloud?.guardrails !== undefined,\n      requestType: data.metadata.requestType,\n    });\n\n    let logger = ctx.logger.child({ component: \"CopilotResolver.generateCopilotResponse\" });\n    logger.debug({ data }, \"Generating Copilot response\");\n\n    if (properties) {\n      logger.debug(\"Properties provided, merging with context properties\");\n      ctx.properties = { ...ctx.properties, ...properties };\n    }\n\n    const copilotRuntime = ctx._copilotkit.runtime;\n    const serviceAdapter = ctx._copilotkit.serviceAdapter;\n\n    let copilotCloudPublicApiKey: string | null = null;\n    let copilotCloudBaseUrl: string;\n\n    if (data.cloud) {\n      logger = logger.child({ cloud: true });\n      logger.debug(\"Cloud configuration provided, checking for public API key in headers\");\n      const key = ctx.request.headers.get(\"x-copilotcloud-public-api-key\");\n      if (key) {\n        logger.debug(\"Public API key found in headers\");\n        copilotCloudPublicApiKey = key;\n      } else {\n        logger.error(\"Public API key not found in headers\");\n        throw new GraphQLError(\"X-CopilotCloud-Public-API-Key header is required\");\n      }\n\n      if (process.env.COPILOT_CLOUD_BASE_URL) {\n        copilotCloudBaseUrl = process.env.COPILOT_CLOUD_BASE_URL;\n      } else if (ctx._copilotkit.cloud?.baseUrl) {\n        copilotCloudBaseUrl = ctx._copilotkit.cloud?.baseUrl;\n      } else {\n        copilotCloudBaseUrl = \"https://api.cloud.copilotkit.ai\";\n      }\n\n      logger = logger.child({ copilotCloudBaseUrl });\n    }\n\n    logger.debug(\"Setting up subjects\");\n    const responseStatus$ = new ReplaySubject<typeof ResponseStatusUnion>();\n    const interruptStreaming$ = new ReplaySubject<{ reason: string; messageId?: string }>();\n    const guardrailsResult$ = new ReplaySubject<GuardrailsResult>();\n\n    let outputMessages: Message[] = [];\n    let resolveOutputMessagesPromise: (messages: Message[]) => void;\n    let rejectOutputMessagesPromise: (err: Error) => void;\n\n    const outputMessagesPromise = new Promise<Message[]>((resolve, reject) => {\n      resolveOutputMessagesPromise = resolve;\n      rejectOutputMessagesPromise = reject;\n    });\n\n    logger.debug(\"Processing\");\n    const {\n      eventSource,\n      threadId = randomId(),\n      runId,\n      serverSideActions,\n      actionInputsWithoutAgents,\n    } = await copilotRuntime.processRuntimeRequest({\n      serviceAdapter,\n      messages: data.messages,\n      actions: data.frontend.actions,\n      threadId: data.threadId,\n      runId: data.runId,\n      publicApiKey: undefined,\n      outputMessagesPromise,\n      graphqlContext: ctx,\n      forwardedParameters: data.forwardedParameters,\n      agentSession: data.agentSession,\n      agentStates: data.agentStates,\n      url: data.frontend.url,\n    });\n\n    logger.debug(\"Event source created, creating response\");\n\n    const response = {\n      threadId,\n      runId,\n      status: firstValueFrom(responseStatus$),\n      messages: new Repeater(async (pushMessage, stopStreamingMessages) => {\n        logger.debug(\"Messages repeater created\");\n\n        if (data.cloud?.guardrails) {\n          logger = logger.child({ guardrails: true });\n          logger.debug(\"Guardrails is enabled, validating input\");\n\n          invokeGuardrails({\n            baseUrl: copilotCloudBaseUrl,\n            copilotCloudPublicApiKey,\n            data,\n            onResult: (result) => {\n              logger.debug({ status: result.status }, \"Guardrails validation done\");\n              guardrailsResult$.next(result);\n\n              // Guardrails validation failed\n              if (result.status === \"denied\") {\n                // send the reason to the client and interrupt streaming\n                responseStatus$.next(\n                  new GuardrailsValidationFailureResponse({ guardrailsReason: result.reason }),\n                );\n                interruptStreaming$.next({\n                  reason: `Interrupted due to Guardrails validation failure. Reason: ${result.reason}`,\n                });\n\n                // resolve messages promise to the middleware\n                outputMessages = [\n                  plainToInstance(TextMessage, {\n                    id: randomId(),\n                    createdAt: new Date(),\n                    content: result.reason,\n                    role: MessageRole.assistant,\n                  }),\n                ];\n                resolveOutputMessagesPromise(outputMessages);\n              }\n            },\n            onError: (err) => {\n              logger.error({ err }, \"Error in guardrails validation\");\n              responseStatus$.next(\n                new UnknownErrorResponse({\n                  description: `An unknown error has occurred in the guardrails validation`,\n                }),\n              );\n              interruptStreaming$.next({\n                reason: `Interrupted due to unknown error in guardrails validation`,\n              });\n\n              // reject the middleware promise\n              rejectOutputMessagesPromise(err);\n            },\n          });\n        }\n\n        let eventStreamSubscription: Subscription;\n\n        // run and process the event stream\n        const eventStream = eventSource\n          .processRuntimeEvents({\n            serverSideActions,\n            guardrailsResult$: data.cloud?.guardrails ? guardrailsResult$ : null,\n            actionInputsWithoutAgents: actionInputsWithoutAgents.filter(\n              // TODO-AGENTS: do not exclude ALL server side actions\n              (action) =>\n                !serverSideActions.find((serverSideAction) => serverSideAction.name == action.name),\n            ),\n          })\n          .pipe(\n            // shareReplay() ensures that later subscribers will see the whole stream instead of\n            // just the events that were emitted after the subscriber was added.\n            shareReplay(),\n            finalize(() => {\n              logger.debug(\"Event stream finalized\");\n            }),\n          );\n\n        logger.debug(\"Event stream created, subscribing to event stream\");\n\n        eventStreamSubscription = eventStream.subscribe({\n          next: async (event) => {\n            switch (event.type) {\n              ////////////////////////////////\n              // TextMessageStart\n              ////////////////////////////////\n              case RuntimeEventTypes.TextMessageStart:\n                // create a sub stream that contains the message content\n                const textMessageContentStream = eventStream.pipe(\n                  // skip until this message start event\n                  skipWhile((e) => e !== event),\n                  // take until the message end event\n                  takeWhile((e) => e.type != RuntimeEventTypes.TextMessageEnd),\n                );\n\n                // signal when we are done streaming\n                const streamingTextStatus = new Subject<typeof MessageStatusUnion>();\n\n                const messageId = event.messageId;\n                // push the new message\n                pushMessage({\n                  id: messageId,\n                  status: firstValueFrom(streamingTextStatus),\n                  createdAt: new Date(),\n                  role: MessageRole.assistant,\n                  content: new Repeater(async (pushTextChunk, stopStreamingText) => {\n                    logger.debug(\"Text message content repeater created\");\n\n                    const textChunks: string[] = [];\n                    let textSubscription: Subscription;\n\n                    interruptStreaming$\n                      .pipe(\n                        shareReplay(),\n                        take(1),\n                        tap(({ reason, messageId }) => {\n                          logger.debug({ reason, messageId }, \"Text streaming interrupted\");\n\n                          streamingTextStatus.next(\n                            plainToInstance(FailedMessageStatus, { reason }),\n                          );\n\n                          responseStatus$.next(new MessageStreamInterruptedResponse({ messageId }));\n                          stopStreamingText();\n                          textSubscription?.unsubscribe();\n                        }),\n                      )\n                      .subscribe();\n\n                    logger.debug(\"Subscribing to text message content stream\");\n\n                    textSubscription = textMessageContentStream.subscribe({\n                      next: async (e: RuntimeEvent) => {\n                        if (e.type == RuntimeEventTypes.TextMessageContent) {\n                          await pushTextChunk(e.content);\n                          textChunks.push(e.content);\n                        }\n                      },\n                      error: (err) => {\n                        logger.error({ err }, \"Error in text message content stream\");\n                        interruptStreaming$.next({\n                          reason: \"Error streaming message content\",\n                          messageId,\n                        });\n                        stopStreamingText();\n                        textSubscription?.unsubscribe();\n                      },\n                      complete: () => {\n                        logger.debug(\"Text message content stream completed\");\n                        streamingTextStatus.next(new SuccessMessageStatus());\n                        stopStreamingText();\n                        textSubscription?.unsubscribe();\n\n                        outputMessages.push(\n                          plainToInstance(TextMessage, {\n                            id: messageId,\n                            createdAt: new Date(),\n                            content: textChunks.join(\"\"),\n                            role: MessageRole.assistant,\n                          }),\n                        );\n                      },\n                    });\n                  }),\n                });\n                break;\n              ////////////////////////////////\n              // ActionExecutionStart\n              ////////////////////////////////\n              case RuntimeEventTypes.ActionExecutionStart:\n                logger.debug(\"Action execution start event received\");\n                const actionExecutionArgumentStream = eventStream.pipe(\n                  skipWhile((e) => e !== event),\n                  takeWhile((e) => e.type != RuntimeEventTypes.ActionExecutionEnd),\n                );\n                const streamingArgumentsStatus = new Subject<typeof MessageStatusUnion>();\n                pushMessage({\n                  id: event.actionExecutionId,\n                  status: firstValueFrom(streamingArgumentsStatus),\n                  createdAt: new Date(),\n                  name: event.actionName,\n                  scope: event.scope!,\n                  arguments: new Repeater(async (pushArgumentsChunk, stopStreamingArguments) => {\n                    logger.debug(\"Action execution argument stream created\");\n\n                    const argumentChunks: string[] = [];\n                    let actionExecutionArgumentSubscription: Subscription;\n\n                    actionExecutionArgumentSubscription = actionExecutionArgumentStream.subscribe({\n                      next: async (e: RuntimeEvent) => {\n                        if (e.type == RuntimeEventTypes.ActionExecutionArgs) {\n                          await pushArgumentsChunk(e.args);\n                          argumentChunks.push(e.args);\n                        }\n                      },\n                      error: (err) => {\n                        logger.error({ err }, \"Error in action execution argument stream\");\n                        streamingArgumentsStatus.next(\n                          plainToInstance(FailedMessageStatus, {\n                            reason:\n                              \"An unknown error has occurred in the action execution argument stream\",\n                          }),\n                        );\n                        stopStreamingArguments();\n                        actionExecutionArgumentSubscription?.unsubscribe();\n                      },\n                      complete: () => {\n                        logger.debug(\"Action execution argument stream completed\");\n                        streamingArgumentsStatus.next(new SuccessMessageStatus());\n                        stopStreamingArguments();\n                        actionExecutionArgumentSubscription?.unsubscribe();\n\n                        outputMessages.push(\n                          plainToInstance(ActionExecutionMessage, {\n                            id: event.actionExecutionId,\n                            createdAt: new Date(),\n                            name: event.actionName,\n                            scope: event.scope!,\n                            arguments: argumentChunks.join(\"\"),\n                          }),\n                        );\n                      },\n                    });\n                  }),\n                });\n                break;\n              ////////////////////////////////\n              // ActionExecutionResult\n              ////////////////////////////////\n              case RuntimeEventTypes.ActionExecutionResult:\n                logger.debug({ result: event.result }, \"Action execution result event received\");\n                pushMessage({\n                  id: randomId(),\n                  status: new SuccessMessageStatus(),\n                  createdAt: new Date(),\n                  actionExecutionId: event.actionExecutionId,\n                  actionName: event.actionName,\n                  result: event.result,\n                });\n\n                outputMessages.push(\n                  plainToInstance(ResultMessage, {\n                    id: randomId(),\n                    createdAt: new Date(),\n                    actionExecutionId: event.actionExecutionId,\n                    actionName: event.actionName,\n                    result: event.result,\n                  }),\n                );\n                break;\n              ////////////////////////////////\n              // AgentStateMessage\n              ////////////////////////////////\n              case RuntimeEventTypes.AgentStateMessage:\n                logger.debug({ event }, \"Agent message event received\");\n                pushMessage({\n                  id: randomId(),\n                  status: new SuccessMessageStatus(),\n                  threadId: event.threadId,\n                  agentName: event.agentName,\n                  nodeName: event.nodeName,\n                  runId: event.runId,\n                  active: event.active,\n                  state: event.state,\n                  running: event.running,\n                  role: MessageRole.assistant,\n                  createdAt: new Date(),\n                });\n                outputMessages.push(\n                  plainToInstance(AgentStateMessage, {\n                    id: randomId(),\n                    threadId: event.threadId,\n                    agentName: event.agentName,\n                    nodeName: event.nodeName,\n                    runId: event.runId,\n                    active: event.active,\n                    state: event.state,\n                    running: event.running,\n                    role: MessageRole.assistant,\n                    createdAt: new Date(),\n                  }),\n                );\n                break;\n            }\n          },\n          error: (err) => {\n            logger.error({ err }, \"Error in event stream\");\n            responseStatus$.next(\n              new UnknownErrorResponse({\n                description: `An unknown error has occurred in the event stream`,\n              }),\n            );\n            eventStreamSubscription?.unsubscribe();\n            stopStreamingMessages();\n\n            rejectOutputMessagesPromise(err);\n          },\n          complete: async () => {\n            logger.debug(\"Event stream completed\");\n            if (data.cloud?.guardrails) {\n              logger.debug(\"Guardrails is enabled, waiting for guardrails result\");\n              await firstValueFrom(guardrailsResult$);\n            }\n            responseStatus$.next(new SuccessResponseStatus());\n            eventStreamSubscription?.unsubscribe();\n            stopStreamingMessages();\n\n            resolveOutputMessagesPromise(outputMessages);\n          },\n        });\n      }),\n    };\n\n    return response;\n  }\n}\n","import { Field, InputType } from \"type-graphql\";\nimport { MessageInput } from \"./message.input\";\nimport { FrontendInput } from \"./frontend.input\";\nimport { CloudInput } from \"./cloud.input\";\nimport { CopilotRequestType } from \"../types/enums\";\nimport { ForwardedParametersInput } from \"./forwarded-parameters.input\";\nimport { AgentSessionInput } from \"./agent-session.input\";\nimport { AgentStateInput } from \"./agent-state.input\";\n\n@InputType()\nexport class GenerateCopilotResponseMetadataInput {\n  @Field(() => CopilotRequestType, { nullable: true })\n  requestType: CopilotRequestType;\n}\n\n@InputType()\nexport class GenerateCopilotResponseInput {\n  @Field(() => GenerateCopilotResponseMetadataInput, { nullable: false })\n  metadata: GenerateCopilotResponseMetadataInput;\n\n  @Field(() => String, { nullable: true })\n  threadId?: string;\n\n  @Field(() => String, { nullable: true })\n  runId?: string;\n\n  @Field(() => [MessageInput])\n  messages: MessageInput[];\n\n  @Field(() => FrontendInput)\n  frontend: FrontendInput;\n\n  @Field(() => CloudInput, { nullable: true })\n  cloud?: CloudInput;\n\n  @Field(() => ForwardedParametersInput, { nullable: true })\n  forwardedParameters?: ForwardedParametersInput;\n\n  @Field(() => AgentSessionInput, { nullable: true })\n  agentSession?: AgentSessionInput;\n\n  @Field(() => AgentStateInput, { nullable: true })\n  agentState?: AgentStateInput;\n\n  @Field(() => [AgentStateInput], { nullable: true })\n  agentStates?: AgentStateInput[];\n}\n","import { Field, InputType } from \"type-graphql\";\nimport { MessageRole, ActionExecutionScope } from \"../types/enums\";\nimport { BaseMessageInput } from \"../types/base\";\n\n// GraphQL does not support union types in inputs, so we need to use\n// optional fields for the different subtypes.\n@InputType()\nexport class MessageInput extends BaseMessageInput {\n  @Field(() => TextMessageInput, { nullable: true })\n  textMessage?: TextMessageInput;\n\n  @Field(() => ActionExecutionMessageInput, { nullable: true })\n  actionExecutionMessage?: ActionExecutionMessageInput;\n\n  @Field(() => ResultMessageInput, { nullable: true })\n  resultMessage?: ResultMessageInput;\n\n  @Field(() => AgentStateMessageInput, { nullable: true })\n  agentStateMessage?: AgentStateMessageInput;\n}\n\n@InputType()\nexport class TextMessageInput {\n  @Field(() => String)\n  content: string;\n\n  @Field(() => MessageRole)\n  role: MessageRole;\n}\n\n@InputType()\nexport class ActionExecutionMessageInput {\n  @Field(() => String)\n  name: string;\n\n  @Field(() => String)\n  arguments: string;\n\n  @Field(() => ActionExecutionScope)\n  scope: ActionExecutionScope;\n}\n\n@InputType()\nexport class ResultMessageInput {\n  @Field(() => String)\n  actionExecutionId: string;\n\n  @Field(() => String)\n  actionName: string;\n\n  @Field(() => String)\n  result: string;\n}\n\n@InputType()\nexport class AgentStateMessageInput {\n  @Field(() => String)\n  threadId: string;\n\n  @Field(() => String)\n  agentName: string;\n\n  @Field(() => MessageRole)\n  role: MessageRole;\n\n  @Field(() => String)\n  state: string;\n\n  @Field(() => Boolean)\n  running: boolean;\n\n  @Field(() => String)\n  nodeName: string;\n\n  @Field(() => String)\n  runId: string;\n\n  @Field(() => Boolean)\n  active: boolean;\n}\n","import { registerEnumType } from \"type-graphql\";\n\nexport enum MessageRole {\n  user = \"user\",\n  assistant = \"assistant\",\n  system = \"system\",\n}\n\nexport enum ActionExecutionScope {\n  server = \"server\",\n  client = \"client\",\n  passThrough = \"passThrough\",\n}\n\nexport enum CopilotRequestType {\n  Chat = \"Chat\",\n  Task = \"Task\",\n  TextareaCompletion = \"TextareaCompletion\",\n  TextareaPopover = \"TextareaPopover\",\n  Suggestion = \"Suggestion\",\n}\n\nregisterEnumType(MessageRole, {\n  name: \"MessageRole\",\n  description: \"The role of the message\",\n});\n\nregisterEnumType(ActionExecutionScope, {\n  name: \"ActionExecutionScope\",\n  description: \"The scope of the action\",\n});\n\nregisterEnumType(CopilotRequestType, {\n  name: \"CopilotRequestType\",\n  description: \"The type of Copilot request\",\n});\n","import { Field, InputType } from \"type-graphql\";\nimport { ActionInput } from \"./action.input\";\n\n@InputType()\nexport class FrontendInput {\n  @Field(() => String, { nullable: true })\n  toDeprecate_fullContext?: string;\n\n  @Field(() => [ActionInput])\n  actions: ActionInput[];\n\n  @Field(() => String, { nullable: true })\n  url?: string;\n}\n","import { Field, InputType } from \"type-graphql\";\n\n@InputType()\nexport class ActionInput {\n  @Field(() => String)\n  name: string;\n\n  @Field(() => String)\n  description: string;\n\n  @Field(() => String)\n  jsonSchema: string;\n}\n","import { Field, InputType } from \"type-graphql\";\nimport { GuardrailsInput } from \"./cloud-guardrails.input\";\n\n@InputType()\nexport class CloudInput {\n  @Field(() => GuardrailsInput, { nullable: true })\n  guardrails?: GuardrailsInput;\n}\n","import { Field, InputType } from \"type-graphql\";\n\n@InputType()\nexport class GuardrailsRuleInput {\n  @Field(() => [String], { nullable: true })\n  allowList?: string[] = [];\n\n  @Field(() => [String], { nullable: true })\n  denyList?: string[] = [];\n}\n\n@InputType()\nexport class GuardrailsInput {\n  @Field(() => GuardrailsRuleInput, { nullable: false })\n  inputValidationRules: GuardrailsRuleInput;\n}\n","import { Field, InputType } from \"type-graphql\";\n\n@InputType()\nexport class ForwardedParametersInput {\n  @Field(() => String, { nullable: true })\n  model?: string;\n\n  @Field(() => Number, { nullable: true })\n  maxTokens?: number;\n\n  @Field(() => [String], { nullable: true })\n  stop?: string[];\n\n  @Field(() => String, { nullable: true })\n  toolChoice?: String;\n\n  @Field(() => String, { nullable: true })\n  toolChoiceFunctionName?: string;\n}\n","import { Field, InputType } from \"type-graphql\";\n\n@InputType()\nexport class AgentSessionInput {\n  @Field(() => String)\n  agentName: string;\n\n  @Field(() => String, { nullable: true })\n  threadId?: string;\n\n  @Field(() => String, { nullable: true })\n  nodeName?: string;\n}\n","import { Field, InputType } from \"type-graphql\";\n\n@InputType()\nexport class AgentStateInput {\n  @Field(() => String)\n  agentName: string;\n\n  @Field(() => String)\n  state: string;\n}\n","import { Field, InterfaceType, ObjectType } from \"type-graphql\";\nimport { MessageRole, ActionExecutionScope } from \"./enums\";\nimport { MessageStatusUnion } from \"./message-status.type\";\nimport { ResponseStatusUnion } from \"./response-status.type\";\n\n@InterfaceType({\n  resolveType(value) {\n    if (value.hasOwnProperty(\"content\")) {\n      return TextMessageOutput;\n    } else if (value.hasOwnProperty(\"name\")) {\n      return ActionExecutionMessageOutput;\n    } else if (value.hasOwnProperty(\"result\")) {\n      return ResultMessageOutput;\n    } else if (value.hasOwnProperty(\"state\")) {\n      return AgentStateMessageOutput;\n    }\n    return undefined;\n  },\n})\nabstract class BaseMessageOutput {\n  @Field(() => String)\n  id: string;\n\n  @Field(() => Date)\n  createdAt: Date;\n\n  @Field(() => MessageStatusUnion)\n  status: typeof MessageStatusUnion;\n}\n\n@ObjectType({ implements: BaseMessageOutput })\nexport class TextMessageOutput {\n  @Field(() => MessageRole)\n  role: MessageRole;\n\n  @Field(() => [String])\n  content: string[];\n}\n\n@ObjectType({ implements: BaseMessageOutput })\nexport class ActionExecutionMessageOutput {\n  @Field(() => String)\n  name: string;\n\n  @Field(() => ActionExecutionScope)\n  scope: ActionExecutionScope;\n\n  @Field(() => [String])\n  arguments: string[];\n}\n\n@ObjectType({ implements: BaseMessageOutput })\nexport class ResultMessageOutput {\n  @Field(() => String)\n  actionExecutionId: string;\n\n  @Field(() => String)\n  actionName: string;\n\n  @Field(() => String)\n  result: string;\n}\n\n@ObjectType({ implements: BaseMessageOutput })\nexport class AgentStateMessageOutput {\n  @Field(() => String)\n  threadId: string;\n\n  @Field(() => String)\n  agentName: string;\n\n  @Field(() => String)\n  nodeName: string;\n\n  @Field(() => String)\n  runId: string;\n\n  @Field(() => Boolean)\n  active: boolean;\n\n  @Field(() => MessageRole)\n  role: MessageRole;\n\n  @Field(() => String)\n  state: string;\n\n  @Field(() => Boolean)\n  running: boolean;\n}\n\n@ObjectType()\nexport class CopilotResponse {\n  @Field(() => String)\n  threadId!: string;\n\n  @Field(() => ResponseStatusUnion)\n  status: typeof ResponseStatusUnion;\n\n  @Field({ nullable: true })\n  runId?: string;\n\n  @Field(() => [BaseMessageOutput])\n  messages: (typeof BaseMessageOutput)[];\n}\n","import { Field, ObjectType, createUnionType, registerEnumType } from \"type-graphql\";\n\nexport enum MessageStatusCode {\n  Pending = \"pending\",\n  Success = \"success\",\n  Failed = \"failed\",\n}\n\nregisterEnumType(MessageStatusCode, {\n  name: \"MessageStatusCode\",\n});\n\n@ObjectType()\nclass BaseMessageStatus {\n  @Field(() => MessageStatusCode)\n  code: MessageStatusCode;\n}\n\n@ObjectType()\nexport class PendingMessageStatus extends BaseMessageStatus {\n  code: MessageStatusCode = MessageStatusCode.Pending;\n}\n\n@ObjectType()\nexport class SuccessMessageStatus extends BaseMessageStatus {\n  code: MessageStatusCode = MessageStatusCode.Success;\n}\n\n@ObjectType()\nexport class FailedMessageStatus extends BaseMessageStatus {\n  code: MessageStatusCode = MessageStatusCode.Failed;\n\n  @Field(() => String)\n  reason: string;\n}\n\nexport const MessageStatusUnion = createUnionType({\n  name: \"MessageStatus\",\n  types: () => [PendingMessageStatus, SuccessMessageStatus, FailedMessageStatus] as const,\n});\n","import { GraphQLJSON } from \"graphql-scalars\";\nimport { Field, InterfaceType, ObjectType, createUnionType, registerEnumType } from \"type-graphql\";\n\nexport enum ResponseStatusCode {\n  Pending = \"pending\",\n  Success = \"success\",\n  Failed = \"failed\",\n}\n\nregisterEnumType(ResponseStatusCode, {\n  name: \"ResponseStatusCode\",\n});\n\n@InterfaceType({\n  resolveType(value) {\n    if (value.code === ResponseStatusCode.Success) {\n      return SuccessResponseStatus;\n    } else if (value.code === ResponseStatusCode.Failed) {\n      return FailedResponseStatus;\n    } else if (value.code === ResponseStatusCode.Pending) {\n      return PendingResponseStatus;\n    }\n    return undefined;\n  },\n})\n@ObjectType()\nabstract class BaseResponseStatus {\n  @Field(() => ResponseStatusCode)\n  code: ResponseStatusCode;\n}\n\n@ObjectType({ implements: BaseResponseStatus })\nexport class PendingResponseStatus extends BaseResponseStatus {\n  code: ResponseStatusCode = ResponseStatusCode.Pending;\n}\n\n@ObjectType({ implements: BaseResponseStatus })\nexport class SuccessResponseStatus extends BaseResponseStatus {\n  code: ResponseStatusCode = ResponseStatusCode.Success;\n}\n\nexport enum FailedResponseStatusReason {\n  GUARDRAILS_VALIDATION_FAILED = \"GUARDRAILS_VALIDATION_FAILED\",\n  MESSAGE_STREAM_INTERRUPTED = \"MESSAGE_STREAM_INTERRUPTED\",\n  UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n}\n\nregisterEnumType(FailedResponseStatusReason, {\n  name: \"FailedResponseStatusReason\",\n});\n\n@ObjectType({ implements: BaseResponseStatus })\nexport class FailedResponseStatus extends BaseResponseStatus {\n  code: ResponseStatusCode = ResponseStatusCode.Failed;\n\n  @Field(() => FailedResponseStatusReason)\n  reason: FailedResponseStatusReason;\n\n  @Field(() => GraphQLJSON, { nullable: true })\n  details?: Record<string, any> = null;\n}\n\nexport const ResponseStatusUnion = createUnionType({\n  name: \"ResponseStatus\",\n  types: () => [PendingResponseStatus, SuccessResponseStatus, FailedResponseStatus] as const,\n});\n","import {\n  FailedResponseStatus,\n  FailedResponseStatusReason,\n} from \"../graphql/types/response-status.type\";\n\nexport class GuardrailsValidationFailureResponse extends FailedResponseStatus {\n  reason = FailedResponseStatusReason.GUARDRAILS_VALIDATION_FAILED;\n  declare details: {\n    guardrailsReason: string;\n  };\n\n  constructor({ guardrailsReason }) {\n    super();\n    this.details = {\n      guardrailsReason,\n    };\n  }\n}\n\nexport class MessageStreamInterruptedResponse extends FailedResponseStatus {\n  reason = FailedResponseStatusReason.MESSAGE_STREAM_INTERRUPTED;\n  declare details: {\n    messageId: string;\n    description: string;\n  };\n\n  constructor({ messageId }: { messageId: string }) {\n    super();\n    this.details = {\n      messageId,\n      description: \"Check the message for mode details\",\n    };\n  }\n}\n\nexport class UnknownErrorResponse extends FailedResponseStatus {\n  reason = FailedResponseStatusReason.UNKNOWN_ERROR;\n  declare details: {\n    description?: string;\n  };\n\n  constructor({ description }: { description?: string }) {\n    super();\n    this.details = {\n      description,\n    };\n  }\n}\n","import createPinoLogger from \"pino\";\nimport pretty from \"pino-pretty\";\n\nexport type LogLevel = \"debug\" | \"info\" | \"warn\" | \"error\";\n\nexport type CopilotRuntimeLogger = ReturnType<typeof createLogger>;\n\nexport function createLogger(options?: { level?: LogLevel; component?: string }) {\n  const { level, component } = options || {};\n  const stream = pretty({ colorize: true });\n\n  const logger = createPinoLogger(\n    {\n      level: process.env.LOG_LEVEL || level || \"error\",\n      redact: {\n        paths: [\"pid\", \"hostname\"],\n        remove: true,\n      },\n    },\n    stream,\n  );\n\n  if (component) {\n    return logger.child({ component });\n  } else {\n    return logger;\n  }\n}\n","import { createYoga } from \"graphql-yoga\";\nimport { CreateCopilotRuntimeServerOptions, getCommonConfig } from \"../shared\";\nimport telemetry from \"../../telemetry-client\";\n\nexport function copilotRuntimeNextJSAppRouterEndpoint(options: CreateCopilotRuntimeServerOptions) {\n  const commonConfig = getCommonConfig(options);\n\n  telemetry.setGlobalProperties({\n    runtime: {\n      framework: \"nextjs-app-router\",\n    },\n  });\n\n  if (options.properties?._copilotkit) {\n    telemetry.setGlobalProperties({\n      _copilotkit: options.properties._copilotkit,\n    });\n  }\n\n  telemetry.capture(\"oss.runtime.instance_created\", {});\n\n  const logger = commonConfig.logging;\n  logger.debug(\"Creating NextJS App Router endpoint\");\n\n  const yoga = createYoga({\n    ...commonConfig,\n    graphqlEndpoint: options.endpoint,\n    fetchAPI: { Response: globalThis.Response },\n  });\n\n  return {\n    handleRequest: yoga,\n    GET: yoga as any,\n    POST: yoga as any,\n    OPTIONS: yoga as any,\n  };\n}\n","import { YogaServerInstance, createYoga } from \"graphql-yoga\";\nimport { CreateCopilotRuntimeServerOptions, GraphQLContext, getCommonConfig } from \"../shared\";\nimport telemetry from \"../../telemetry-client\";\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nexport type CopilotRuntimeServerInstance<T> = YogaServerInstance<T, Partial<GraphQLContext>>;\n\n// This import is needed to fix the type error\n// Fix is currently in TypeScript 5.5 beta, waiting for stable version\n// https://github.com/microsoft/TypeScript/issues/42873#issuecomment-2066874644\nexport type {} from \"@whatwg-node/server\";\n\nexport function copilotRuntimeNextJSPagesRouterEndpoint(\n  options: CreateCopilotRuntimeServerOptions,\n): CopilotRuntimeServerInstance<GraphQLContext> {\n  const commonConfig = getCommonConfig(options);\n\n  telemetry.setGlobalProperties({\n    runtime: {\n      framework: \"nextjs-pages-router\",\n    },\n  });\n\n  if (options.properties?._copilotkit) {\n    telemetry.setGlobalProperties({\n      _copilotkit: options.properties._copilotkit,\n    });\n  }\n\n  telemetry.capture(\"oss.runtime.instance_created\", {});\n\n  const logger = commonConfig.logging;\n  logger.debug(\"Creating NextJS Pages Router endpoint\");\n\n  const yoga = createYoga({\n    ...commonConfig,\n    graphqlEndpoint: options.endpoint,\n  });\n\n  return yoga;\n}\n","import { createYoga } from \"graphql-yoga\";\nimport { CreateCopilotRuntimeServerOptions, getCommonConfig } from \"../shared\";\nimport telemetry from \"../../telemetry-client\";\n\nexport function copilotRuntimeNodeHttpEndpoint(options: CreateCopilotRuntimeServerOptions) {\n  const commonConfig = getCommonConfig(options);\n\n  telemetry.setGlobalProperties({\n    runtime: {\n      framework: \"node-http\",\n    },\n  });\n\n  if (options.properties?._copilotkit) {\n    telemetry.setGlobalProperties({\n      _copilotkit: options.properties._copilotkit,\n    });\n  }\n\n  telemetry.capture(\"oss.runtime.instance_created\", {});\n\n  const logger = commonConfig.logging;\n  logger.debug(\"Creating Node HTTP endpoint\");\n\n  const yoga = createYoga({\n    ...commonConfig,\n    graphqlEndpoint: options.endpoint,\n  });\n\n  return yoga;\n}\n","import { CreateCopilotRuntimeServerOptions } from \"../shared\";\nimport { copilotRuntimeNodeHttpEndpoint } from \"../node-http\";\nimport telemetry from \"../../telemetry-client\";\n\nexport function copilotRuntimeNodeExpressEndpoint(options: CreateCopilotRuntimeServerOptions) {\n  telemetry.setGlobalProperties({\n    runtime: {\n      framework: \"node-express\",\n    },\n  });\n\n  telemetry.capture(\"oss.runtime.instance_created\", {});\n  return copilotRuntimeNodeHttpEndpoint(options);\n}\n","import { CreateCopilotRuntimeServerOptions } from \"../shared\";\nimport { copilotRuntimeNodeHttpEndpoint } from \"../node-http\";\nimport telemetry from \"../../telemetry-client\";\n\nexport function copilotRuntimeNestEndpoint(options: CreateCopilotRuntimeServerOptions) {\n  telemetry.setGlobalProperties({\n    runtime: {\n      framework: \"nest\",\n    },\n  });\n\n  telemetry.capture(\"oss.runtime.instance_created\", {});\n  return copilotRuntimeNodeHttpEndpoint(options);\n}\n"],"mappings":"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","names":["module","import_shared","RemoteChain","name","description","chainUrl","parameters","parameterType","constructor","options","toAction","inferLangServeParameters","handler","args","runnable","RemoteRunnable","url","input","Object","keys","invoke","supportedTypes","schemaUrl","replace","schema","fetch","then","res","json","catch","Error","includes","type","properties","map","key","property","required","limitMessagesToTokenCount","messages","tools","model","maxTokens","maxTokensForOpenAIModel","result","toolsNumTokens","countToolsTokens","Error","message","role","numTokens","countMessageTokens","cutoff","reversedMessages","reverse","unshift","maxTokensByModel","DEFAULT_MAX_TOKENS","length","json","JSON","stringify","countTokens","content","text","convertActionInputToOpenAITool","action","type","function","name","description","parameters","parse","jsonSchema","convertMessageToOpenAIMessage","isTextMessage","isActionExecutionMessage","tool_calls","id","arguments","isResultMessage","tool_call_id","actionExecutionId","convertSystemMessageToAssistantAPI","DEFAULT_MODEL","OpenAIAdapter","model","disableParallelToolCalls","_openai","openai","constructor","params","OpenAI","process","request","threadId","messages","actions","eventSource","forwardedParameters","tools","map","convertActionInputToOpenAITool","openaiMessages","convertMessageToOpenAIMessage","limitMessagesToTokenCount","toolChoice","type","function","name","toolChoiceFunctionName","stream","beta","chat","completions","length","maxTokens","max_tokens","stop","tool_choice","parallel_tool_calls","eventStream$","mode","chunk","toolCall","choices","delta","tool_calls","content","id","sendTextMessageEnd","undefined","sendActionExecutionEnd","sendActionExecutionStart","sendTextMessageStart","sendTextMessageContent","arguments","sendActionExecutionArgs","complete","randomId","import_shared","convertMessageToLangChainMessage","message","isTextMessage","role","HumanMessage","content","AIMessage","SystemMessage","isActionExecutionMessage","tool_calls","id","args","arguments","name","isResultMessage","ToolMessage","result","tool_call_id","actionExecutionId","convertJsonSchemaToZodSchema","jsonSchema","required","type","spec","properties","Object","keys","length","z","object","optional","key","value","entries","includes","schema","describe","description","string","number","boolean","itemSchema","items","array","convertActionInputToLangChainTool","actionInput","DynamicStructuredTool","JSON","parse","func","isAIMessage","message","Object","prototype","toString","call","isAIMessageChunk","isBaseMessageChunk","maybeSendActionExecutionResultIsMessage","eventStream$","actionExecution","sendActionExecutionResult","id","name","streamLangChainResponse","result","sendTextMessage","randomId","content","toolCall","tool_calls","sendActionExecution","JSON","stringify","args","lc_kwargs","reader","getReader","mode","toolCallDetails","index","prevIndex","done","value","read","toolCallName","undefined","toolCallId","toolCallArgs","hasToolCall","chunk","tool_call_chunks","additional_kwargs","function","arguments","sendTextMessageEnd","sendActionExecutionEnd","sendActionExecutionStart","sendTextMessageStart","sendTextMessageContent","Array","isArray","text","sendActionExecutionArgs","error","console","encodeResult","Error","complete","import_shared","LangChainAdapter","constructor","options","process","request","eventSource","model","actions","messages","threadId","runId","result","chainFn","map","convertMessageToLangChainMessage","tools","convertActionInputToLangChainTool","stream","eventStream$","streamLangChainResponse","randomId","GoogleGenerativeAIAdapter","LangChainAdapter","constructor","options","chainFn","messages","tools","model","ChatGoogle","modelName","apiVersion","bindTools","stream","import_openai","OpenAIAssistantAdapter","openai","codeInterpreterEnabled","assistantId","fileSearchEnabled","disableParallelToolCalls","constructor","params","OpenAI","process","request","messages","actions","eventSource","runId","forwardedParameters","threadId","beta","threads","create","id","lastMessage","at","nextRunId","undefined","isResultMessage","submitToolOutputs","isTextMessage","submitUserMessage","Error","run","runs","retrieve","required_action","toolCallsIds","submit_tool_outputs","tool_calls","map","toolCall","resultMessages","filter","message","includes","actionExecutionId","length","toolOutputs","tool_call_id","output","result","stream","submitToolOutputsStream","tool_outputs","parallel_tool_calls","streamResponse","instructionsMessage","shift","instructions","content","userMessage","convertMessageToOpenAIMessage","convertSystemMessageToAssistantAPI","role","openaiTools","convertActionInputToOpenAITool","tools","type","assistant_id","maxTokens","max_completion_tokens","getRunIdFromStream","eventStream$","inFunctionCall","chunk","event","sendActionExecutionEnd","sendTextMessageStart","data","delta","sendTextMessageContent","text","value","sendTextMessageEnd","toolCallId","toolCallName","toolCallArgs","step_details","function","name","arguments","sendActionExecutionStart","sendActionExecutionArgs","complete","Promise","resolve","reject","runIdGetter","off","on","import_openai","import_shared","UnifyAdapter","apiKey","model","start","constructor","options","process","request","tools","actions","map","convertActionInputToOpenAITool","openai","OpenAI","baseURL","messages","convertMessageToOpenAIMessage","stream","chat","completions","create","length","eventSource","eventStream$","mode","chunk","sendTextMessageStart","randomId","sendTextMessageContent","sendTextMessageEnd","toolCall","choices","delta","tool_calls","content","id","undefined","sendActionExecutionEnd","sendActionExecutionStart","function","name","arguments","sendActionExecutionArgs","complete","threadId","import_shared","DEFAULT_MODEL","GroqAdapter","model","disableParallelToolCalls","_groq","groq","constructor","params","Groq","process","request","threadId","messages","actions","eventSource","forwardedParameters","tools","map","convertActionInputToOpenAITool","openaiMessages","convertMessageToOpenAIMessage","limitMessagesToTokenCount","toolChoice","type","function","name","toolChoiceFunctionName","stream","chat","completions","create","length","maxTokens","max_tokens","stop","tool_choice","parallel_tool_calls","eventStream$","mode","chunk","toolCall","choices","delta","tool_calls","content","id","sendTextMessageEnd","undefined","sendActionExecutionEnd","sendActionExecutionStart","sendTextMessageStart","sendTextMessageContent","arguments","sendActionExecutionArgs","complete","randomId","limitMessagesToTokenCount","messages","tools","model","maxTokens","MAX_TOKENS","result","toolsNumTokens","countToolsTokens","Error","message","role","numTokens","countMessageTokens","cutoff","reversedMessages","reverse","unshift","length","json","JSON","stringify","countTokens","content","text","convertActionInputToAnthropicTool","action","name","description","input_schema","parse","jsonSchema","convertMessageToAnthropicMessage","isTextMessage","type","isActionExecutionMessage","id","input","arguments","isResultMessage","tool_use_id","actionExecutionId","groupAnthropicMessagesByRole","messageParams","reduce","acc","lastGroup","concat","push","import_shared","DEFAULT_MODEL","AnthropicAdapter","model","_anthropic","anthropic","constructor","params","Anthropic","process","request","threadId","messages","rawMessages","actions","eventSource","forwardedParameters","tools","map","convertActionInputToAnthropicTool","instructionsMessage","shift","instructions","isTextMessage","content","anthropicMessages","convertMessageToAnthropicMessage","limitMessagesToTokenCount","groupAnthropicMessagesByRole","toolChoice","type","name","toolChoiceFunctionName","stream","create","system","max_tokens","maxTokens","length","tool_choice","eventStream$","mode","didOutputText","currentMessageId","randomId","currentToolCallId","filterThinkingTextBuffer","FilterThinkingTextBuffer","chunk","message","id","content_block","reset","sendActionExecutionStart","delta","text","onTextChunk","sendTextMessageStart","sendTextMessageContent","sendActionExecutionArgs","partial_json","sendTextMessageEnd","sendActionExecutionEnd","complete","THINKING_TAG","THINKING_TAG_END","buffer","didFilterThinkingTag","potentialTag","slice","startsWith","includes","end","indexOf","filteredText","import_rxjs","import_shared","packageJson","require","telemetryClient","TelemetryClient","packageName","name","packageVersion","version","LangGraphEventTypes","import_shared","RemoteLangGraphEventSource","eventStream$","ReplaySubject","streamResponse","response","reader","body","getReader","decoder","TextDecoder","buffer","flushBuffer","currentBuffer","join","trim","length","parts","split","lastPartIsComplete","endsWith","push","pop","map","part","filter","forEach","next","JSON","parse","done","value","read","decode","stream","error","console","complete","shouldEmitToolCall","shouldEmitToolCalls","toolCallName","Array","isArray","includes","processLangGraphEvents","lastEventWithState","pipe","scan","acc","event","LangGraphEventTypes","OnChatModelStream","content","data","chunk","kwargs","text","tool_call_chunks","prevToolCallMessageId","toolCallMessageId","id","name","toolCallId","prevMessageId","messageId","mergeMap","eventWithState","events","shouldEmitMessages","metadata","type","RuntimeEventTypes","ActionExecutionEnd","TextMessageEnd","OnCopilotKitEmitMessage","TextMessageStart","message_id","TextMessageContent","message","OnCopilotKitEmitToolCall","ActionExecutionStart","actionExecutionId","actionName","ActionExecutionArgs","args","stringify","OnCopilotKitStateSync","AgentStateMessage","threadId","thread_id","role","agentName","agent_name","nodeName","node_name","runId","run_id","active","state","running","OnToolEnd","scope","catchError","randomId","isLangGraphAgentAction","action","langGraphAgentHandler","createHeaders","onBeforeRequest","graphqlContext","headers","additionalHeaders","ctx","Object","assign","fetchRemoteInfo","url","logger","frontendUrl","debug","response","fetch","method","body","JSON","stringify","properties","ok","error","status","text","actions","agents","json","message","constructRemoteActions","messages","agentStates","map","name","description","parameters","handler","args","actionName","telemetry","capture","arguments","requestResult","result","agent","_args","actionInputsWithoutAgents","threadId","nodeName","state","jsonState","find","agentName","parse","jsonSchema","Error","eventSource","RemoteLangGraphEventSource","streamResponse","processLangGraphEvents","setupRemoteActions","remoteActionDefinitions","child","component","filtered","filter","value","index","self","findIndex","t","Promise","all","actionDefinition","flat","RuntimeEventTypes","RuntimeEventSubject","ReplaySubject","constructor","sendTextMessageStart","messageId","next","type","sendTextMessageContent","content","sendTextMessageEnd","sendTextMessage","sendActionExecutionStart","actionExecutionId","actionName","sendActionExecutionArgs","args","sendActionExecutionEnd","sendActionExecution","toolName","sendActionExecutionResult","result","sendAgentStateMessage","threadId","agentName","nodeName","runId","active","role","state","running","RuntimeEventSource","eventStream$","callback","stream","processRuntimeEvents","serverSideActions","guardrailsResult$","actionInputsWithoutAgents","catch","error","console","pipe","map","event","scope","find","action","name","scan","acc","callActionServerSide","concatMap","eventWithState","toolCallEventStream$","executeAction","telemetry","capture","concat","of","actionArguments","status","firstValueFrom","complete","JSON","parse","e","warn","isLangGraphAgentAction","langGraphAgentHandler","from","subscribe","err","handler","streamLangChainResponse","actionExecution","id","BaseMessageInput","id","createdAt","Field","String","Date","InputType","Message","BaseMessageInput","type","isTextMessage","isActionExecutionMessage","isResultMessage","isAgentStateMessage","TextMessage","content","role","ActionExecutionMessage","name","arguments","scope","ResultMessage","actionExecutionId","actionName","result","AgentStateMessage","threadId","agentName","nodeName","runId","active","state","running","convertGqlInputToMessages","inputMessages","messages","message","textMessage","push","plainToInstance","TextMessage","id","createdAt","role","content","actionExecutionMessage","ActionExecutionMessage","name","arguments","JSON","parse","scope","resultMessage","ResultMessage","actionExecutionId","actionName","result","agentStateMessage","AgentStateMessage","threadId","agentName","nodeName","runId","active","state","running","import_rxjs","CopilotRuntime","actions","remoteActionDefinitions","langserve","onBeforeRequest","onAfterRequest","constructor","params","chain","remoteChain","RemoteChain","push","toAction","remoteActions","middleware","processRuntimeRequest","request","serviceAdapter","messages","rawMessages","clientSideActionsInput","threadId","runId","outputMessagesPromise","graphqlContext","forwardedParameters","agentSession","url","processAgentRequest","filter","message","agentStateMessage","inputMessages","convertGqlInputToMessages","serverSideActions","getServerSideActions","serverSideActionsInput","map","action","name","description","jsonSchema","JSON","stringify","actionParametersToJsonSchema","parameters","actionInputs","flattenToolCallsNoDuplicates","properties","eventSource","RuntimeEventSource","result","process","then","outputMessages","_a","catch","_error","actionInputsWithoutAgents","find","serverSideAction","error","console","randomId","agentName","nodeName","agent","isLangGraphAgentAction","Error","undefined","stream","langGraphAgentHandler","eventStream$","from","subscribe","next","event","err","complete","agentStates","langserveFunctions","chainPromise","setupRemoteActions","frontendUrl","configuredActions","toolsByPriority","allTools","allToolNames","tool","includes","import_type_graphql","import_type_graphql","import_rxjs","import_type_graphql","import_type_graphql","import_type_graphql","MessageRole","ActionExecutionScope","CopilotRequestType","registerEnumType","name","description","MessageInput","BaseMessageInput","textMessage","actionExecutionMessage","resultMessage","agentStateMessage","Field","TextMessageInput","nullable","ActionExecutionMessageInput","ResultMessageInput","AgentStateMessageInput","InputType","content","role","String","MessageRole","name","arguments","scope","ActionExecutionScope","actionExecutionId","actionName","result","threadId","agentName","state","running","nodeName","runId","active","Boolean","import_type_graphql","import_type_graphql","ActionInput","name","description","jsonSchema","Field","String","InputType","FrontendInput","toDeprecate_fullContext","actions","url","Field","String","nullable","ActionInput","InputType","import_type_graphql","import_type_graphql","GuardrailsRuleInput","allowList","denyList","Field","String","nullable","InputType","GuardrailsInput","inputValidationRules","CloudInput","guardrails","Field","GuardrailsInput","nullable","InputType","import_type_graphql","ForwardedParametersInput","model","maxTokens","stop","toolChoice","toolChoiceFunctionName","Field","String","nullable","Number","InputType","import_type_graphql","AgentSessionInput","agentName","threadId","nodeName","Field","String","nullable","InputType","import_type_graphql","AgentStateInput","agentName","state","Field","String","InputType","GenerateCopilotResponseMetadataInput","requestType","Field","CopilotRequestType","nullable","InputType","GenerateCopilotResponseInput","metadata","threadId","runId","messages","frontend","cloud","forwardedParameters","agentSession","agentState","agentStates","String","MessageInput","FrontendInput","CloudInput","ForwardedParametersInput","AgentSessionInput","AgentStateInput","import_type_graphql","import_type_graphql","MessageStatusCode","registerEnumType","name","BaseMessageStatus","code","Field","ObjectType","PendingMessageStatus","SuccessMessageStatus","FailedMessageStatus","reason","String","MessageStatusUnion","createUnionType","types","import_type_graphql","ResponseStatusCode","registerEnumType","name","BaseResponseStatus","code","Field","InterfaceType","resolveType","value","SuccessResponseStatus","FailedResponseStatus","PendingResponseStatus","undefined","ObjectType","implements","FailedResponseStatusReason","reason","details","GraphQLJSON","nullable","ResponseStatusUnion","createUnionType","types","BaseMessageOutput","id","createdAt","status","Field","String","Date","MessageStatusUnion","InterfaceType","resolveType","value","hasOwnProperty","TextMessageOutput","ActionExecutionMessageOutput","ResultMessageOutput","AgentStateMessageOutput","undefined","role","content","MessageRole","ObjectType","implements","name","scope","arguments","ActionExecutionScope","actionExecutionId","actionName","result","threadId","agentName","nodeName","runId","active","state","running","Boolean","CopilotResponse","messages","ResponseStatusUnion","nullable","import_graphql_scalars","import_class_transformer","GuardrailsValidationFailureResponse","FailedResponseStatus","reason","FailedResponseStatusReason","GUARDRAILS_VALIDATION_FAILED","constructor","guardrailsReason","details","MessageStreamInterruptedResponse","MESSAGE_STREAM_INTERRUPTED","messageId","description","UnknownErrorResponse","UNKNOWN_ERROR","import_shared","invokeGuardrails","baseUrl","copilotCloudPublicApiKey","data","onResult","onError","messages","length","textMessage","role","MessageRole","user","filter","m","undefined","assistant","map","content","lastMessage","restOfMessages","slice","body","input","validTopics","cloud","guardrails","inputValidationRules","allowList","invalidTopics","denyList","guardrailsResult","fetch","method","headers","JSON","stringify","ok","resultJson","json","CopilotResolver","hello","generateCopilotResponse","ctx","properties","telemetry","capture","requestType","metadata","logger","child","component","debug","copilotRuntime","_copilotkit","runtime","serviceAdapter","copilotCloudBaseUrl","key","request","get","error","GraphQLError","process","env","COPILOT_CLOUD_BASE_URL","responseStatus$","ReplaySubject","interruptStreaming$","guardrailsResult$","outputMessages","resolveOutputMessagesPromise","rejectOutputMessagesPromise","outputMessagesPromise","Promise","resolve","reject","eventSource","threadId","randomId","runId","serverSideActions","actionInputsWithoutAgents","processRuntimeRequest","actions","frontend","publicApiKey","graphqlContext","forwardedParameters","agentSession","agentStates","url","response","status","firstValueFrom","Repeater","pushMessage","stopStreamingMessages","result","next","GuardrailsValidationFailureResponse","guardrailsReason","reason","plainToInstance","TextMessage","id","createdAt","Date","err","UnknownErrorResponse","description","eventStreamSubscription","eventStream","processRuntimeEvents","action","find","serverSideAction","name","pipe","shareReplay","finalize","subscribe","event","type","RuntimeEventTypes","TextMessageStart","textMessageContentStream","skipWhile","e","takeWhile","TextMessageEnd","streamingTextStatus","Subject","messageId","pushTextChunk","stopStreamingText","textChunks","textSubscription","take","tap","FailedMessageStatus","MessageStreamInterruptedResponse","unsubscribe","TextMessageContent","push","complete","SuccessMessageStatus","join","ActionExecutionStart","actionExecutionArgumentStream","ActionExecutionEnd","streamingArgumentsStatus","actionExecutionId","actionName","scope","arguments","pushArgumentsChunk","stopStreamingArguments","argumentChunks","actionExecutionArgumentSubscription","ActionExecutionArgs","args","ActionExecutionMessage","ActionExecutionResult","ResultMessage","AgentStateMessage","agentName","nodeName","active","state","running","SuccessResponseStatus","Query","String","Mutation","CopilotResponse","Ctx","Arg","GraphQLJSONObject","nullable","Resolver","createLogger","options","level","component","stream","pretty","colorize","logger","createPinoLogger","process","env","LOG_LEVEL","redact","paths","remove","child","logger","createLogger","createContext","initialContext","copilotKitContext","contextLogger","properties","debug","ctx","_copilotkit","buildSchema","options","schema","buildSchemaSync","resolvers","CopilotResolver","emitSchemaFile","getCommonConfig","logLevel","process","env","LOG_LEVEL","level","component","cloud","telemetry","setCloudConfiguration","publicApiKey","baseUrl","setGlobalProperties","runtime","serviceAdapter","constructor","name","logging","plugins","useDeferStream","context","import_graphql_yoga","copilotRuntimeNextJSAppRouterEndpoint","options","commonConfig","getCommonConfig","telemetry","setGlobalProperties","runtime","framework","properties","_copilotkit","capture","logger","logging","debug","yoga","createYoga","graphqlEndpoint","endpoint","fetchAPI","Response","globalThis","handleRequest","GET","POST","OPTIONS","import_graphql_yoga","config","api","bodyParser","copilotRuntimeNextJSPagesRouterEndpoint","options","commonConfig","getCommonConfig","telemetry","setGlobalProperties","runtime","framework","properties","_copilotkit","capture","logger","logging","debug","yoga","createYoga","graphqlEndpoint","endpoint","import_graphql_yoga","copilotRuntimeNodeHttpEndpoint","options","commonConfig","getCommonConfig","telemetry","setGlobalProperties","runtime","framework","properties","_copilotkit","capture","logger","logging","debug","yoga","createYoga","graphqlEndpoint","endpoint","copilotRuntimeNodeExpressEndpoint","options","telemetry","setGlobalProperties","runtime","framework","capture","copilotRuntimeNodeHttpEndpoint","copilotRuntimeNestEndpoint","options","telemetry","setGlobalProperties","runtime","framework","capture","copilotRuntimeNodeHttpEndpoint"]}