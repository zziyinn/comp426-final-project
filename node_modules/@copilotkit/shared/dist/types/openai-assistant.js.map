{"version":3,"sources":["../../src/types/openai-assistant.ts"],"sourcesContent":["export interface FunctionDefinition {\n  /**\n   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\n   * underscores and dashes, with a maximum length of 64.\n   */\n  name: string;\n  /**\n   * The parameters the functions accepts, described as a JSON Schema object. See the\n   * [guide](/docs/guides/gpt/function-calling) for examples, and the\n   * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\n   * documentation about the format.\n   *\n   * To describe a function that accepts no parameters, provide the value\n   * `{\"type\": \"object\", \"properties\": {}}`.\n   */\n  parameters: Record<string, unknown>;\n  /**\n   * A description of what the function does, used by the model to choose when and\n   * how to call the function.\n   */\n  description?: string;\n}\n\nexport interface ToolDefinition {\n  type: \"function\";\n  function: FunctionDefinition;\n}\n\nexport interface FunctionCallHandlerArguments {\n  messages: any[];\n  name: string;\n  args: any;\n}\n\nexport type FunctionCallHandler = (args: FunctionCallHandlerArguments) => Promise<any>;\n\nexport type CoAgentStateRenderHandlerArguments = {\n  name: string;\n  nodeName: string;\n  state: any;\n};\n\nexport type CoAgentStateRenderHandler = (args: CoAgentStateRenderHandlerArguments) => Promise<any>;\n\nexport type AssistantMessage = {\n  id: string;\n  role: \"assistant\";\n  content: Array<{\n    type: \"text\";\n    text: {\n      value: string;\n    };\n  }>;\n};\n\nexport type JSONValue =\n  | null\n  | string\n  | number\n  | boolean\n  | { [x: string]: JSONValue }\n  | Array<JSONValue>;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}