{"version":3,"sources":["../src/client/CopilotRuntimeClient.ts","../package.json"],"sourcesContent":["import { Client, cacheExchange, fetchExchange } from \"@urql/core\";\nimport * as packageJson from \"../../package.json\";\n\nimport {\n  GenerateCopilotResponseMutation,\n  GenerateCopilotResponseMutationVariables,\n} from \"../graphql/@generated/graphql\";\nimport { generateCopilotResponseMutation } from \"../graphql/definitions/mutations\";\nimport { OperationResultSource, OperationResult } from \"urql\";\n\ninterface CopilotRuntimeClientOptions {\n  url: string;\n  publicApiKey?: string;\n  headers?: Record<string, string>;\n  credentials?: RequestCredentials;\n}\n\nexport class CopilotRuntimeClient {\n  client: Client;\n\n  constructor(options: CopilotRuntimeClientOptions) {\n    const headers: Record<string, string> = {};\n\n    if (options.headers) {\n      Object.assign(headers, options.headers);\n    }\n\n    if (options.publicApiKey) {\n      headers[\"x-copilotcloud-public-api-key\"] = options.publicApiKey;\n    }\n\n    this.client = new Client({\n      url: options.url,\n      exchanges: [cacheExchange, fetchExchange],\n      fetchOptions: {\n        headers: {\n          ...headers,\n          \"X-CopilotKit-Runtime-Client-GQL-Version\": packageJson.version,\n        },\n        ...(options.credentials ? { credentials: options.credentials } : {}),\n      },\n    });\n  }\n\n  generateCopilotResponse({\n    data,\n    properties,\n    signal,\n  }: {\n    data: GenerateCopilotResponseMutationVariables[\"data\"];\n    properties?: GenerateCopilotResponseMutationVariables[\"properties\"];\n    signal?: AbortSignal;\n  }) {\n    const result = this.client.mutation<\n      GenerateCopilotResponseMutation,\n      GenerateCopilotResponseMutationVariables\n    >(\n      generateCopilotResponseMutation,\n      { data, properties },\n      { fetch: (url, opts) => fetch(url, { ...opts, signal }) },\n    );\n\n    return result;\n  }\n\n  static asStream<S, T>(source: OperationResultSource<OperationResult<S, { data: T }>>) {\n    return new ReadableStream<S>({\n      start(controller) {\n        source.subscribe(({ data, hasNext }) => {\n          controller.enqueue(data);\n          if (!hasNext) {\n            controller.close();\n          }\n        });\n      },\n    });\n  }\n}\n","{\n  \"name\": \"@copilotkit/runtime-client-gql\",\n  \"private\": false,\n  \"homepage\": \"https://github.com/CopilotKit/CopilotKit\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/CopilotKit/CopilotKit.git\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"version\": \"1.3.15\",\n  \"sideEffects\": false,\n  \"main\": \"./dist/index.js\",\n  \"module\": \"./dist/index.mjs\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./dist/index.mjs\",\n      \"require\": \"./dist/index.js\",\n      \"types\": \"./dist/index.d.ts\"\n    }\n  },\n  \"types\": \"./dist/index.d.ts\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build\": \"tsup --clean\",\n    \"dev\": \"tsup --watch --no-splitting\",\n    \"test\": \"jest --passWithNoTests\",\n    \"check-types\": \"tsc --noEmit\",\n    \"clean\": \"rm -rf .turbo && rm -rf node_modules && rm -rf dist && rm -rf .next\",\n    \"graphql-codegen\": \"graphql-codegen\",\n    \"graphql-codegen:watch\": \"graphql-codegen --watch\",\n    \"link:global\": \"pnpm link --global\",\n    \"unlink:global\": \"pnpm unlink --global\"\n  },\n  \"peerDependencies\": {\n    \"react\": \"^18 || ^19 || ^19.0.0-rc\"\n  },\n  \"devDependencies\": {\n    \"@graphql-codegen/cli\": \"^5.0.2\",\n    \"@graphql-codegen/client-preset\": \"^4.2.6\",\n    \"@graphql-codegen/introspection\": \"^4.0.3\",\n    \"@graphql-codegen/typescript\": \"^4.0.7\",\n    \"@graphql-codegen/typescript-operations\": \"^4.2.1\",\n    \"@graphql-codegen/typescript-urql\": \"^4.0.0\",\n    \"@graphql-codegen/urql-introspection\": \"^3.0.0\",\n    \"@graphql-typed-document-node/core\": \"^3.2.0\",\n    \"@parcel/watcher\": \"^2.4.1\",\n    \"@types/node\": \"^20.12.12\",\n    \"esbuild\": \"^0.23.0\",\n    \"jest\": \"^29.6.4\",\n    \"ts-jest\": \"^29.1.1\",\n    \"ts-node\": \"^10.9.2\",\n    \"tsup\": \"^6.7.0\",\n    \"typescript\": \"^5.4.5\"\n  },\n  \"dependencies\": {\n    \"@copilotkit/runtime\": \"workspace:*\",\n    \"@copilotkit/shared\": \"workspace:*\",\n    \"@urql/core\": \"^5.0.3\",\n    \"class-transformer\": \"^0.5.1\",\n    \"class-validator\": \"^0.14.1\",\n    \"graphql\": \"^16.8.1\",\n    \"untruncate-json\": \"^0.0.1\",\n    \"urql\": \"^4.1.0\",\n    \"wonka\": \"^6.3.4\"\n  },\n  \"keywords\": [\n    \"copilotkit\",\n    \"copilot\",\n    \"react\",\n    \"nextjs\",\n    \"nodejs\",\n    \"ai\",\n    \"assistant\",\n    \"javascript\",\n    \"automation\",\n    \"textarea\"\n  ]\n}\n"],"mappings":";;;;;AAAA,SAAS,QAAQ,eAAe,qBAAqB;;;ACWnD,cAAW;;;ADMN,IAAM,uBAAN,MAA2B;AAAA,EAGhC,YAAY,SAAsC;AAChD,UAAM,UAAkC,CAAC;AAEzC,QAAI,QAAQ,SAAS;AACnB,aAAO,OAAO,SAAS,QAAQ,OAAO;AAAA,IACxC;AAEA,QAAI,QAAQ,cAAc;AACxB,cAAQ,+BAA+B,IAAI,QAAQ;AAAA,IACrD;AAEA,SAAK,SAAS,IAAI,OAAO;AAAA,MACvB,KAAK,QAAQ;AAAA,MACb,WAAW,CAAC,eAAe,aAAa;AAAA,MACxC,cAAc;AAAA,QACZ,SAAS;AAAA,UACP,GAAG;AAAA,UACH,2CAAuD;AAAA,QACzD;AAAA,QACA,GAAI,QAAQ,cAAc,EAAE,aAAa,QAAQ,YAAY,IAAI,CAAC;AAAA,MACpE;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,wBAAwB;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAIG;AACD,UAAM,SAAS,KAAK,OAAO;AAAA,MAIzB;AAAA,MACA,EAAE,MAAM,WAAW;AAAA,MACnB,EAAE,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,EAAE,GAAG,MAAM,OAAO,CAAC,EAAE;AAAA,IAC1D;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,SAAe,QAAgE;AACpF,WAAO,IAAI,eAAkB;AAAA,MAC3B,MAAM,YAAY;AAChB,eAAO,UAAU,CAAC,EAAE,MAAM,QAAQ,MAAM;AACtC,qBAAW,QAAQ,IAAI;AACvB,cAAI,CAAC,SAAS;AACZ,uBAAW,MAAM;AAAA,UACnB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAAA,EACH;AACF;","names":[]}