export * from './interfaces';
import { ID } from '../user';
import { Integrations, EventProperties, CoreSegmentEvent, CoreOptions, UserTraits, GroupTraits } from './interfaces';
export type EventMethodCallHook = ({ type, options, }: {
    type: 'track' | 'identify' | 'page' | 'group' | 'alias' | 'screen';
    options?: CoreOptions;
}) => void;
export type EventHook = (event: CoreSegmentEvent) => void;
export interface EventFactorySettings {
    /**
     * Universal `messageId` builder for all events (these must be unique)
     */
    createMessageId: () => string;
    /**
     * Hook to do something with an event right before they are returned from the factory.
     * This includes event modification or additional validation.
     */
    onFinishedEvent?: EventHook;
    /**
     * Hook whenever an event method is called (track, page, etc.)
     * Can be used to update Options (or just listen)
     */
    onEventMethodCall?: EventMethodCallHook;
}
export declare abstract class CoreEventFactory {
    private settings;
    constructor(settings: EventFactorySettings);
    track(event: string, properties?: EventProperties, options?: CoreOptions, globalIntegrations?: Integrations): CoreSegmentEvent;
    page(category: string | null, page: string | null, properties?: EventProperties, options?: CoreOptions, globalIntegrations?: Integrations): CoreSegmentEvent;
    screen(category: string | null, screen: string | null, properties?: EventProperties, options?: CoreOptions, globalIntegrations?: Integrations): CoreSegmentEvent;
    identify(userId: ID, traits?: UserTraits, options?: CoreOptions, globalIntegrations?: Integrations): CoreSegmentEvent;
    group(groupId: ID, traits?: GroupTraits, options?: CoreOptions, globalIntegrations?: Integrations): CoreSegmentEvent;
    alias(to: string, from: string | null, // TODO: can we make this undefined?
    options?: CoreOptions, globalIntegrations?: Integrations): CoreSegmentEvent;
    private baseEvent;
    /**
     * Builds the context part of an event based on "foreign" keys that
     * are provided in the `Options` parameter for an Event
     */
    private context;
    private normalize;
}
//# sourceMappingURL=index.d.ts.map